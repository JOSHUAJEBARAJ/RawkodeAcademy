// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.
 *
 * @schema Gateway
 */
export class Gateway extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Gateway"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'Gateway',
  }

  /**
   * Renders a Kubernetes manifest for "Gateway".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayProps): any {
    return {
      ...Gateway.GVK,
      ...toJson_GatewayProps(props),
    };
  }

  /**
   * Defines a "Gateway" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayProps) {
    super(scope, id, {
      ...Gateway.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Gateway.GVK,
      ...toJson_GatewayProps(resolved),
    };
  }
}

/**
 * Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.
 *
 * @schema Gateway
 */
export interface GatewayProps {
  /**
   * @schema Gateway#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of Gateway.
   *
   * @schema Gateway#spec
   */
  readonly spec: GatewaySpec;

}

/**
 * Converts an object of type 'GatewayProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayProps(obj: GatewayProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewaySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of Gateway.
 *
 * @schema GatewaySpec
 */
export interface GatewaySpec {
  /**
   * Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses.
   * The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to.
   * The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination.
   * If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses.
   * The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses.
   * Support: Extended
   *
   * @schema GatewaySpec#addresses
   */
  readonly addresses?: GatewaySpecAddresses[];

  /**
   * GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
   *
   * @schema GatewaySpec#gatewayClassName
   */
  readonly gatewayClassName: string;

  /**
   * Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified.
   * Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol.
   * An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are "compatible". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways.
   * For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met:
   * 1. Either each Listener within the group specifies the "HTTP"    Protocol or each Listener within the group specifies either    the "HTTPS" or "TLS" Protocol.
   * 2. Each Listener within the group specifies a Hostname that is unique    within the group.
   * 3. As a special case, one Listener within a group may omit Hostname,    in which case this Listener matches when no other Listener    matches.
   * If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches.
   * If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a "Conflicted" condition in the Listener status.
   * Support: Core
   *
   * @schema GatewaySpec#listeners
   */
  readonly listeners: GatewaySpecListeners[];

}

/**
 * Converts an object of type 'GatewaySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpec(obj: GatewaySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => toJson_GatewaySpecAddresses(y)),
    'gatewayClassName': obj.gatewayClassName,
    'listeners': obj.listeners?.map(y => toJson_GatewaySpecListeners(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayAddress describes an address that can be bound to a Gateway.
 *
 * @schema GatewaySpecAddresses
 */
export interface GatewaySpecAddresses {
  /**
   * Type of the address.
   *
   * @schema GatewaySpecAddresses#type
   */
  readonly type?: string;

  /**
   * Value of the address. The validity of the values will depend on the type and support by the controller.
   * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
   *
   * @schema GatewaySpecAddresses#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'GatewaySpecAddresses' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecAddresses(obj: GatewaySpecAddresses | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.
 *
 * @schema GatewaySpecListeners
 */
export interface GatewaySpecListeners {
  /**
   * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.
   * Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:
   * * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with   a creation timestamp of "2020-09-08 01:02:03" is given precedence over   a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in   alphabetical order (namespace/name) should be given precedence. For   example, foo/bar is given precedence over foo/baz.
   * All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.
   * Support: Core
   *
   * @schema GatewaySpecListeners#allowedRoutes
   */
  readonly allowedRoutes?: GatewaySpecListenersAllowedRoutes;

  /**
   * Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching.
   * Implementations MUST apply Hostname matching appropriately for each of the following protocols:
   * * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP   protocol layers as described above. If an implementation does not   ensure that both the SNI and Host header match the Listener hostname,   it MUST clearly document that.
   * For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation.
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   * Support: Core
   *
   * @schema GatewaySpecListeners#hostname
   */
  readonly hostname?: string;

  /**
   * Name is the name of the Listener. This name MUST be unique within a Gateway.
   * Support: Core
   *
   * @schema GatewaySpecListeners#name
   */
  readonly name: string;

  /**
   * Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules.
   * Support: Core
   *
   * @schema GatewaySpecListeners#port
   */
  readonly port: number;

  /**
   * Protocol specifies the network protocol this listener expects to receive.
   * Support: Core
   *
   * @schema GatewaySpecListeners#protocol
   */
  readonly protocol: string;

  /**
   * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP".
   * The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener.
   * The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake.
   * Support: Core
   *
   * @schema GatewaySpecListeners#tls
   */
  readonly tls?: GatewaySpecListenersTls;

}

/**
 * Converts an object of type 'GatewaySpecListeners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListeners(obj: GatewaySpecListeners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedRoutes': toJson_GatewaySpecListenersAllowedRoutes(obj.allowedRoutes),
    'hostname': obj.hostname,
    'name': obj.name,
    'port': obj.port,
    'protocol': obj.protocol,
    'tls': toJson_GatewaySpecListenersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.
 * Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:
 * * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with   a creation timestamp of "2020-09-08 01:02:03" is given precedence over   a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in   alphabetical order (namespace/name) should be given precedence. For   example, foo/bar is given precedence over foo/baz.
 * All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.
 * Support: Core
 *
 * @schema GatewaySpecListenersAllowedRoutes
 */
export interface GatewaySpecListenersAllowedRoutes {
  /**
   * Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol.
   * A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason.
   * Support: Core
   *
   * @schema GatewaySpecListenersAllowedRoutes#kinds
   */
  readonly kinds?: GatewaySpecListenersAllowedRoutesKinds[];

  /**
   * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.
   * Support: Core
   *
   * @schema GatewaySpecListenersAllowedRoutes#namespaces
   */
  readonly namespaces?: GatewaySpecListenersAllowedRoutesNamespaces;

}

/**
 * Converts an object of type 'GatewaySpecListenersAllowedRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersAllowedRoutes(obj: GatewaySpecListenersAllowedRoutes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kinds': obj.kinds?.map(y => toJson_GatewaySpecListenersAllowedRoutesKinds(y)),
    'namespaces': toJson_GatewaySpecListenersAllowedRoutesNamespaces(obj.namespaces),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP".
 * The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener.
 * The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake.
 * Support: Core
 *
 * @schema GatewaySpecListenersTls
 */
export interface GatewaySpecListenersTls {
  /**
   * CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener.
   * A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific.
   * References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "InvalidCertificateRef" reason.
   * This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise.
   * CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources.
   * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
   * Support: Implementation-specific (More than one reference or other resource types)
   *
   * @schema GatewaySpecListenersTls#certificateRefs
   */
  readonly certificateRefs?: GatewaySpecListenersTlsCertificateRefs[];

  /**
   * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes:
   * - Terminate: The TLS session between the downstream client   and the Gateway is terminated at the Gateway. This mode requires   certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This   implies that the Gateway can't decipher the TLS stream except for   the ClientHello message of the TLS protocol.   CertificateRefs field is ignored in this mode.
   * Support: Core
   *
   * @schema GatewaySpecListenersTls#mode
   */
  readonly mode?: GatewaySpecListenersTlsMode;

  /**
   * Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites.
   * A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API.
   * Support: Implementation-specific
   *
   * @schema GatewaySpecListenersTls#options
   */
  readonly options?: { [key: string]: string };

}

/**
 * Converts an object of type 'GatewaySpecListenersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersTls(obj: GatewaySpecListenersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateRefs': obj.certificateRefs?.map(y => toJson_GatewaySpecListenersTlsCertificateRefs(y)),
    'mode': obj.mode,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RouteGroupKind indicates the group and kind of a Route resource.
 *
 * @schema GatewaySpecListenersAllowedRoutesKinds
 */
export interface GatewaySpecListenersAllowedRoutesKinds {
  /**
   * Group is the group of the Route.
   *
   * @schema GatewaySpecListenersAllowedRoutesKinds#group
   */
  readonly group?: string;

  /**
   * Kind is the kind of the Route.
   *
   * @schema GatewaySpecListenersAllowedRoutesKinds#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'GatewaySpecListenersAllowedRoutesKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersAllowedRoutesKinds(obj: GatewaySpecListenersAllowedRoutesKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.
 * Support: Core
 *
 * @schema GatewaySpecListenersAllowedRoutesNamespaces
 */
export interface GatewaySpecListenersAllowedRoutesNamespaces {
  /**
   * From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.
   * Support: Core
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespaces#from
   */
  readonly from?: GatewaySpecListenersAllowedRoutesNamespacesFrom;

  /**
   * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From".
   * Support: Core
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespaces#selector
   */
  readonly selector?: GatewaySpecListenersAllowedRoutesNamespacesSelector;

}

/**
 * Converts an object of type 'GatewaySpecListenersAllowedRoutesNamespaces' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersAllowedRoutesNamespaces(obj: GatewaySpecListenersAllowedRoutesNamespaces | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'selector': toJson_GatewaySpecListenersAllowedRoutesNamespacesSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObjectReference identifies an API object including its namespace, defaulting to Secret.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 * References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
 *
 * @schema GatewaySpecListenersTlsCertificateRefs
 */
export interface GatewaySpecListenersTlsCertificateRefs {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema GatewaySpecListenersTlsCertificateRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema GatewaySpecListenersTlsCertificateRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema GatewaySpecListenersTlsCertificateRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Secret is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema GatewaySpecListenersTlsCertificateRefs#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewaySpecListenersTlsCertificateRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersTlsCertificateRefs(obj: GatewaySpecListenersTlsCertificateRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes:
 * - Terminate: The TLS session between the downstream client   and the Gateway is terminated at the Gateway. This mode requires   certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This   implies that the Gateway can't decipher the TLS stream except for   the ClientHello message of the TLS protocol.   CertificateRefs field is ignored in this mode.
 * Support: Core
 *
 * @schema GatewaySpecListenersTlsMode
 */
export enum GatewaySpecListenersTlsMode {
  /** Terminate */
  TERMINATE = 'Terminate',
  /** Passthrough */
  PASSTHROUGH = 'Passthrough',
}

/**
 * From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.
 * Support: Core
 *
 * @schema GatewaySpecListenersAllowedRoutesNamespacesFrom
 */
export enum GatewaySpecListenersAllowedRoutesNamespacesFrom {
  /** All */
  ALL = 'All',
  /** Selector */
  SELECTOR = 'Selector',
  /** Same */
  SAME = 'Same',
}

/**
 * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From".
 * Support: Core
 *
 * @schema GatewaySpecListenersAllowedRoutesNamespacesSelector
 */
export interface GatewaySpecListenersAllowedRoutesNamespacesSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespacesSelector#matchExpressions
   */
  readonly matchExpressions?: GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespacesSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'GatewaySpecListenersAllowedRoutesNamespacesSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersAllowedRoutesNamespacesSelector(obj: GatewaySpecListenersAllowedRoutesNamespacesSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions
 */
export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions(obj: GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.
 *
 * @schema GatewayV1Beta1
 */
export class GatewayV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GatewayV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1beta1',
    kind: 'Gateway',
  }

  /**
   * Renders a Kubernetes manifest for "GatewayV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayV1Beta1Props): any {
    return {
      ...GatewayV1Beta1.GVK,
      ...toJson_GatewayV1Beta1Props(props),
    };
  }

  /**
   * Defines a "GatewayV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayV1Beta1Props) {
    super(scope, id, {
      ...GatewayV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GatewayV1Beta1.GVK,
      ...toJson_GatewayV1Beta1Props(resolved),
    };
  }
}

/**
 * Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.
 *
 * @schema GatewayV1Beta1
 */
export interface GatewayV1Beta1Props {
  /**
   * @schema GatewayV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of Gateway.
   *
   * @schema GatewayV1Beta1#spec
   */
  readonly spec: GatewayV1Beta1Spec;

}

/**
 * Converts an object of type 'GatewayV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1Props(obj: GatewayV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewayV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of Gateway.
 *
 * @schema GatewayV1Beta1Spec
 */
export interface GatewayV1Beta1Spec {
  /**
   * Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses.
   * The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to.
   * The .listener.hostname field is used to route traffic that has already arrived at the Gateway to the correct in-cluster destination.
   * If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses.
   * The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses.
   * Support: Extended
   *
   * @schema GatewayV1Beta1Spec#addresses
   */
  readonly addresses?: GatewayV1Beta1SpecAddresses[];

  /**
   * GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
   *
   * @schema GatewayV1Beta1Spec#gatewayClassName
   */
  readonly gatewayClassName: string;

  /**
   * Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified.
   * Each listener in a Gateway must have a unique combination of Hostname, Port, and Protocol.
   * An implementation MAY group Listeners by Port and then collapse each group of Listeners into a single Listener if the implementation determines that the Listeners in the group are "compatible". An implementation MAY also group together and collapse compatible Listeners belonging to different Gateways.
   * For example, an implementation might consider Listeners to be compatible with each other if all of the following conditions are met:
   * 1. Either each Listener within the group specifies the "HTTP"    Protocol or each Listener within the group specifies either    the "HTTPS" or "TLS" Protocol.
   * 2. Each Listener within the group specifies a Hostname that is unique    within the group.
   * 3. As a special case, one Listener within a group may omit Hostname,    in which case this Listener matches when no other Listener    matches.
   * If the implementation does collapse compatible Listeners, the hostname provided in the incoming client request MUST be matched to a Listener to find the correct set of Routes. The incoming hostname MUST be matched using the Hostname field for each Listener in order of most to least specific. That is, exact matches must be processed before wildcard matches.
   * If this field specifies multiple Listeners that have the same Port value but are not compatible, the implementation must raise a "Conflicted" condition in the Listener status.
   * Support: Core
   *
   * @schema GatewayV1Beta1Spec#listeners
   */
  readonly listeners: GatewayV1Beta1SpecListeners[];

}

/**
 * Converts an object of type 'GatewayV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1Spec(obj: GatewayV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => toJson_GatewayV1Beta1SpecAddresses(y)),
    'gatewayClassName': obj.gatewayClassName,
    'listeners': obj.listeners?.map(y => toJson_GatewayV1Beta1SpecListeners(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GatewayAddress describes an address that can be bound to a Gateway.
 *
 * @schema GatewayV1Beta1SpecAddresses
 */
export interface GatewayV1Beta1SpecAddresses {
  /**
   * Type of the address.
   *
   * @schema GatewayV1Beta1SpecAddresses#type
   */
  readonly type?: string;

  /**
   * Value of the address. The validity of the values will depend on the type and support by the controller.
   * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
   *
   * @schema GatewayV1Beta1SpecAddresses#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecAddresses' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecAddresses(obj: GatewayV1Beta1SpecAddresses | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.
 *
 * @schema GatewayV1Beta1SpecListeners
 */
export interface GatewayV1Beta1SpecListeners {
  /**
   * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.
   * Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:
   * * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with   a creation timestamp of "2020-09-08 01:02:03" is given precedence over   a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in   alphabetical order (namespace/name) should be given precedence. For   example, foo/bar is given precedence over foo/baz.
   * All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#allowedRoutes
   */
  readonly allowedRoutes?: GatewayV1Beta1SpecListenersAllowedRoutes;

  /**
   * Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching.
   * Implementations MUST apply Hostname matching appropriately for each of the following protocols:
   * * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP   protocol layers as described above. If an implementation does not   ensure that both the SNI and Host header match the Listener hostname,   it MUST clearly document that.
   * For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation.
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#hostname
   */
  readonly hostname?: string;

  /**
   * Name is the name of the Listener. This name MUST be unique within a Gateway.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#name
   */
  readonly name: string;

  /**
   * Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#port
   */
  readonly port: number;

  /**
   * Protocol specifies the network protocol this listener expects to receive.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#protocol
   */
  readonly protocol: string;

  /**
   * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP".
   * The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener.
   * The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListeners#tls
   */
  readonly tls?: GatewayV1Beta1SpecListenersTls;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListeners' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListeners(obj: GatewayV1Beta1SpecListeners | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedRoutes': toJson_GatewayV1Beta1SpecListenersAllowedRoutes(obj.allowedRoutes),
    'hostname': obj.hostname,
    'name': obj.name,
    'port': obj.port,
    'protocol': obj.protocol,
    'tls': toJson_GatewayV1Beta1SpecListenersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.
 * Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:
 * * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with   a creation timestamp of "2020-09-08 01:02:03" is given precedence over   a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in   alphabetical order (namespace/name) should be given precedence. For   example, foo/bar is given precedence over foo/baz.
 * All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutes
 */
export interface GatewayV1Beta1SpecListenersAllowedRoutes {
  /**
   * Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol.
   * A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutes#kinds
   */
  readonly kinds?: GatewayV1Beta1SpecListenersAllowedRoutesKinds[];

  /**
   * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutes#namespaces
   */
  readonly namespaces?: GatewayV1Beta1SpecListenersAllowedRoutesNamespaces;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersAllowedRoutes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersAllowedRoutes(obj: GatewayV1Beta1SpecListenersAllowedRoutes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kinds': obj.kinds?.map(y => toJson_GatewayV1Beta1SpecListenersAllowedRoutesKinds(y)),
    'namespaces': toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespaces(obj.namespaces),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP".
 * The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener.
 * The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake.
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersTls
 */
export interface GatewayV1Beta1SpecListenersTls {
  /**
   * CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener.
   * A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific.
   * References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "InvalidCertificateRef" reason.
   * This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise.
   * CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources.
   * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
   * Support: Implementation-specific (More than one reference or other resource types)
   *
   * @schema GatewayV1Beta1SpecListenersTls#certificateRefs
   */
  readonly certificateRefs?: GatewayV1Beta1SpecListenersTlsCertificateRefs[];

  /**
   * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes:
   * - Terminate: The TLS session between the downstream client   and the Gateway is terminated at the Gateway. This mode requires   certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This   implies that the Gateway can't decipher the TLS stream except for   the ClientHello message of the TLS protocol.   CertificateRefs field is ignored in this mode.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersTls#mode
   */
  readonly mode?: GatewayV1Beta1SpecListenersTlsMode;

  /**
   * Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites.
   * A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API.
   * Support: Implementation-specific
   *
   * @schema GatewayV1Beta1SpecListenersTls#options
   */
  readonly options?: { [key: string]: string };

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersTls(obj: GatewayV1Beta1SpecListenersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'certificateRefs': obj.certificateRefs?.map(y => toJson_GatewayV1Beta1SpecListenersTlsCertificateRefs(y)),
    'mode': obj.mode,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RouteGroupKind indicates the group and kind of a Route resource.
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutesKinds
 */
export interface GatewayV1Beta1SpecListenersAllowedRoutesKinds {
  /**
   * Group is the group of the Route.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesKinds#group
   */
  readonly group?: string;

  /**
   * Kind is the kind of the Route.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesKinds#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersAllowedRoutesKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersAllowedRoutesKinds(obj: GatewayV1Beta1SpecListenersAllowedRoutesKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespaces
 */
export interface GatewayV1Beta1SpecListenersAllowedRoutesNamespaces {
  /**
   * From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespaces#from
   */
  readonly from?: GatewayV1Beta1SpecListenersAllowedRoutesNamespacesFrom;

  /**
   * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From".
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespaces#selector
   */
  readonly selector?: GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersAllowedRoutesNamespaces' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespaces(obj: GatewayV1Beta1SpecListenersAllowedRoutesNamespaces | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'selector': toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObjectReference identifies an API object including its namespace, defaulting to Secret.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 * References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
 *
 * @schema GatewayV1Beta1SpecListenersTlsCertificateRefs
 */
export interface GatewayV1Beta1SpecListenersTlsCertificateRefs {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema GatewayV1Beta1SpecListenersTlsCertificateRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema GatewayV1Beta1SpecListenersTlsCertificateRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema GatewayV1Beta1SpecListenersTlsCertificateRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema GatewayV1Beta1SpecListenersTlsCertificateRefs#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersTlsCertificateRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersTlsCertificateRefs(obj: GatewayV1Beta1SpecListenersTlsCertificateRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes:
 * - Terminate: The TLS session between the downstream client   and the Gateway is terminated at the Gateway. This mode requires   certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This   implies that the Gateway can't decipher the TLS stream except for   the ClientHello message of the TLS protocol.   CertificateRefs field is ignored in this mode.
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersTlsMode
 */
export enum GatewayV1Beta1SpecListenersTlsMode {
  /** Terminate */
  TERMINATE = 'Terminate',
  /** Passthrough */
  PASSTHROUGH = 'Passthrough',
}

/**
 * From indicates where Routes will be selected for this Gateway. Possible values are: * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesFrom
 */
export enum GatewayV1Beta1SpecListenersAllowedRoutesNamespacesFrom {
  /** All */
  ALL = 'All',
  /** Selector */
  SELECTOR = 'Selector',
  /** Same */
  SAME = 'Same',
}

/**
 * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From".
 * Support: Core
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector
 */
export interface GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector#matchExpressions
   */
  readonly matchExpressions?: GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector(obj: GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions
 */
export interface GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions(obj: GatewayV1Beta1SpecListenersAllowedRoutesNamespacesSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * GatewayClass describes a class of Gateways available to the user for creating Gateway resources. 
 It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. 
 Whenever one or more Gateways are using a GatewayClass, implementations MUST add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. 
 GatewayClass is a Cluster level resource.
 *
 * @schema GatewayClass
 */
export class GatewayClass extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GatewayClass"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'GatewayClass',
  }

  /**
   * Renders a Kubernetes manifest for "GatewayClass".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayClassProps): any {
    return {
      ...GatewayClass.GVK,
      ...toJson_GatewayClassProps(props),
    };
  }

  /**
   * Defines a "GatewayClass" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayClassProps) {
    super(scope, id, {
      ...GatewayClass.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GatewayClass.GVK,
      ...toJson_GatewayClassProps(resolved),
    };
  }
}

/**
 * GatewayClass describes a class of Gateways available to the user for creating Gateway resources.
 * It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation.
 * Whenever one or more Gateways are using a GatewayClass, implementations MUST add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use.
 * GatewayClass is a Cluster level resource.
 *
 * @schema GatewayClass
 */
export interface GatewayClassProps {
  /**
   * @schema GatewayClass#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of GatewayClass.
   *
   * @schema GatewayClass#spec
   */
  readonly spec: GatewayClassSpec;

}

/**
 * Converts an object of type 'GatewayClassProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassProps(obj: GatewayClassProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewayClassSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of GatewayClass.
 *
 * @schema GatewayClassSpec
 */
export interface GatewayClassSpec {
  /**
   * ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path.
   * Example: "example.net/gateway-controller".
   * This field is not mutable and cannot be empty.
   * Support: Core
   *
   * @schema GatewayClassSpec#controllerName
   */
  readonly controllerName: string;

  /**
   * Description helps describe a GatewayClass with more details.
   *
   * @schema GatewayClassSpec#description
   */
  readonly description?: string;

  /**
   * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration.
   * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped.
   * If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true.
   * Support: Custom
   *
   * @schema GatewayClassSpec#parametersRef
   */
  readonly parametersRef?: GatewayClassSpecParametersRef;

}

/**
 * Converts an object of type 'GatewayClassSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassSpec(obj: GatewayClassSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'controllerName': obj.controllerName,
    'description': obj.description,
    'parametersRef': toJson_GatewayClassSpecParametersRef(obj.parametersRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration.
 * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped.
 * If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true.
 * Support: Custom
 *
 * @schema GatewayClassSpecParametersRef
 */
export interface GatewayClassSpecParametersRef {
  /**
   * Group is the group of the referent.
   *
   * @schema GatewayClassSpecParametersRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent.
   *
   * @schema GatewayClassSpecParametersRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema GatewayClassSpecParametersRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
   *
   * @schema GatewayClassSpecParametersRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayClassSpecParametersRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassSpecParametersRef(obj: GatewayClassSpecParametersRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * GatewayClass describes a class of Gateways available to the user for creating Gateway resources. 
 It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation. 
 Whenever one or more Gateways are using a GatewayClass, implementations MUST add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use. 
 GatewayClass is a Cluster level resource.
 *
 * @schema GatewayClassV1Beta1
 */
export class GatewayClassV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GatewayClassV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1beta1',
    kind: 'GatewayClass',
  }

  /**
   * Renders a Kubernetes manifest for "GatewayClassV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayClassV1Beta1Props): any {
    return {
      ...GatewayClassV1Beta1.GVK,
      ...toJson_GatewayClassV1Beta1Props(props),
    };
  }

  /**
   * Defines a "GatewayClassV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayClassV1Beta1Props) {
    super(scope, id, {
      ...GatewayClassV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GatewayClassV1Beta1.GVK,
      ...toJson_GatewayClassV1Beta1Props(resolved),
    };
  }
}

/**
 * GatewayClass describes a class of Gateways available to the user for creating Gateway resources.
 * It is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation.
 * Whenever one or more Gateways are using a GatewayClass, implementations MUST add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use.
 * GatewayClass is a Cluster level resource.
 *
 * @schema GatewayClassV1Beta1
 */
export interface GatewayClassV1Beta1Props {
  /**
   * @schema GatewayClassV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of GatewayClass.
   *
   * @schema GatewayClassV1Beta1#spec
   */
  readonly spec: GatewayClassV1Beta1Spec;

}

/**
 * Converts an object of type 'GatewayClassV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassV1Beta1Props(obj: GatewayClassV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewayClassV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of GatewayClass.
 *
 * @schema GatewayClassV1Beta1Spec
 */
export interface GatewayClassV1Beta1Spec {
  /**
   * ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path.
   * Example: "example.net/gateway-controller".
   * This field is not mutable and cannot be empty.
   * Support: Core
   *
   * @schema GatewayClassV1Beta1Spec#controllerName
   */
  readonly controllerName: string;

  /**
   * Description helps describe a GatewayClass with more details.
   *
   * @schema GatewayClassV1Beta1Spec#description
   */
  readonly description?: string;

  /**
   * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration.
   * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped.
   * If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true.
   * Support: Custom
   *
   * @schema GatewayClassV1Beta1Spec#parametersRef
   */
  readonly parametersRef?: GatewayClassV1Beta1SpecParametersRef;

}

/**
 * Converts an object of type 'GatewayClassV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassV1Beta1Spec(obj: GatewayClassV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'controllerName': obj.controllerName,
    'description': obj.description,
    'parametersRef': toJson_GatewayClassV1Beta1SpecParametersRef(obj.parametersRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration.
 * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped.
 * If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true.
 * Support: Custom
 *
 * @schema GatewayClassV1Beta1SpecParametersRef
 */
export interface GatewayClassV1Beta1SpecParametersRef {
  /**
   * Group is the group of the referent.
   *
   * @schema GatewayClassV1Beta1SpecParametersRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent.
   *
   * @schema GatewayClassV1Beta1SpecParametersRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema GatewayClassV1Beta1SpecParametersRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
   *
   * @schema GatewayClassV1Beta1SpecParametersRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'GatewayClassV1Beta1SpecParametersRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayClassV1Beta1SpecParametersRef(obj: GatewayClassV1Beta1SpecParametersRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.
 *
 * @schema HTTPRoute
 */
export class HttpRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HTTPRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'HTTPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "HTTPRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HttpRouteProps): any {
    return {
      ...HttpRoute.GVK,
      ...toJson_HttpRouteProps(props),
    };
  }

  /**
   * Defines a "HTTPRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HttpRouteProps) {
    super(scope, id, {
      ...HttpRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HttpRoute.GVK,
      ...toJson_HttpRouteProps(resolved),
    };
  }
}

/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.
 *
 * @schema HTTPRoute
 */
export interface HttpRouteProps {
  /**
   * @schema HTTPRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of HTTPRoute.
   *
   * @schema HTTPRoute#spec
   */
  readonly spec: HttpRouteSpec;

}

/**
 * Converts an object of type 'HttpRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteProps(obj: HttpRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HttpRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of HTTPRoute.
 *
 * @schema HttpRouteSpec
 */
export interface HttpRouteSpec {
  /**
   * Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:
   * 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label.
   * If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example:
   * * A Listener with `test.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames, or have specified at   least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames or have specified at least   one hostname that matches the Listener hostname. For example,   `*.example.com`, `test.example.com`, and `foo.test.example.com` would   all match. On the other hand, `example.com` and `test.example.net` would   not match.
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   * If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match.
   * If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.
   * Support: Core
   *
   * @schema HttpRouteSpec#hostnames
   */
  readonly hostnames?: string[];

  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace.
   * The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds.
   * It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway.
   * It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
   *
   * @schema HttpRouteSpec#parentRefs
   */
  readonly parentRefs?: HttpRouteSpecParentRefs[];

  /**
   * Rules are a list of HTTP matchers, filters and actions.
   *
   * @schema HttpRouteSpec#rules
   */
  readonly rules?: HttpRouteSpecRules[];

}

/**
 * Converts an object of type 'HttpRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpec(obj: HttpRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'parentRefs': obj.parentRefs?.map(y => toJson_HttpRouteSpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_HttpRouteSpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 *
 * @schema HttpRouteSpecParentRefs
 */
export interface HttpRouteSpecParentRefs {
  /**
   * Group is the group of the referent.
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   * Support: Core (Gateway)
   * Support: Custom (Other Resources)
   *
   * @schema HttpRouteSpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route.
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.
   * When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.
   * For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:
   * * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.
   * When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Core
   *
   * @schema HttpRouteSpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'HttpRouteSpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecParentRefs(obj: HttpRouteSpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
 *
 * @schema HttpRouteSpecRules
 */
export interface HttpRouteSpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be sent.
   * Failure behavior here depends on how many BackendRefs are specified and how many are invalid.
   * If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code.
   * See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid.
   * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code.
   * For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined.
   * Support: Core for Kubernetes Service
   * Support: Custom for any other resource
   * Support for weight: Core
   *
   * @schema HttpRouteSpecRules#backendRefs
   */
  readonly backendRefs?: HttpRouteSpecRulesBackendRefs[];

  /**
   * Filters define the filters that are applied to requests that match this rule.
   * The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage.
   * Conformance-levels at this level are defined based on the type of filter:
   * - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations.
   * Specifying a core filter multiple times has unspecified or custom conformance.
   * All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status.
   * Support: Core
   *
   * @schema HttpRouteSpecRules#filters
   */
  readonly filters?: HttpRouteSpecRulesFilters[];

  /**
   * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.
   * For example, take the following matches configuration:
   * ``` matches: - path:     value: "/foo"   headers:   - name: "version"     value: "v2" - path:     value: "/v2/foo" ```
   * For a request to match against this rule, a request must satisfy EITHER of the two conditions:
   * - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo`
   * See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together.
   * If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request.
   * Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize rules based on the following criteria, continuing on ties. Precedence must be given to the Rule with the largest number of:
   * * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching path. * Header matches. * Query param matches.
   * If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:
   * * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   "{namespace}/{name}".
   * If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.
   * When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
   *
   * @schema HttpRouteSpecRules#matches
   */
  readonly matches?: HttpRouteSpecRulesMatches[];

}

/**
 * Converts an object of type 'HttpRouteSpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRules(obj: HttpRouteSpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_HttpRouteSpecRulesBackendRefs(y)),
    'filters': obj.filters?.map(y => toJson_HttpRouteSpecRulesFilters(y)),
    'matches': obj.matches?.map(y => toJson_HttpRouteSpecRulesMatches(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPBackendRef defines how a HTTPRoute should forward an HTTP request.
 *
 * @schema HttpRouteSpecRulesBackendRefs
 */
export interface HttpRouteSpecRulesBackendRefs {
  /**
   * Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here.
   * Support: Custom (For broader support of filters, use the Filters field in HTTPRouteRule.)
   *
   * @schema HttpRouteSpecRulesBackendRefs#filters
   */
  readonly filters?: HttpRouteSpecRulesBackendRefsFilters[];

  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteSpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.
   * If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.
   * Support for this field varies based on the context where used.
   *
   * @schema HttpRouteSpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefs(obj: HttpRouteSpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filters': obj.filters?.map(y => toJson_HttpRouteSpecRulesBackendRefsFilters(y)),
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteSpecRulesFilters
 */
export interface HttpRouteSpecRulesFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
   * Support: Implementation-specific
   *
   * @schema HttpRouteSpecRulesFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteSpecRulesFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request headers.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteSpecRulesFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteSpecRulesFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteSpecRulesFiltersRequestRedirect;

  /**
   * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
   * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
   * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
   * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
   * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
   * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   *
   * @schema HttpRouteSpecRulesFilters#type
   */
  readonly type: HttpRouteSpecRulesFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteSpecRulesFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFilters(obj: HttpRouteSpecRulesFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteSpecRulesFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteSpecRulesFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteSpecRulesFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteSpecRulesFiltersRequestRedirect(obj.requestRedirect),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteSpecRulesFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied.
 * For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header:
 * ``` match:   path:     value: "/foo"   headers:   - name: "version"     value "v1" ```
 *
 * @schema HttpRouteSpecRulesMatches
 */
export interface HttpRouteSpecRulesMatches {
  /**
   * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
   *
   * @schema HttpRouteSpecRulesMatches#headers
   */
  readonly headers?: HttpRouteSpecRulesMatchesHeaders[];

  /**
   * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method.
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesMatches#method
   */
  readonly method?: HttpRouteSpecRulesMatchesMethod;

  /**
   * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
   *
   * @schema HttpRouteSpecRulesMatches#path
   */
  readonly path?: HttpRouteSpecRulesMatchesPath;

  /**
   * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route.
   *
   * @schema HttpRouteSpecRulesMatches#queryParams
   */
  readonly queryParams?: HttpRouteSpecRulesMatchesQueryParams[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatches(obj: HttpRouteSpecRulesMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_HttpRouteSpecRulesMatchesHeaders(y)),
    'method': obj.method,
    'path': toJson_HttpRouteSpecRulesMatchesPath(obj.path),
    'queryParams': obj.queryParams?.map(y => toJson_HttpRouteSpecRulesMatchesQueryParams(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteSpecRulesBackendRefsFilters
 */
export interface HttpRouteSpecRulesBackendRefsFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
   * Support: Implementation-specific
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteSpecRulesBackendRefsFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request headers.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteSpecRulesBackendRefsFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirect;

  /**
   * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
   * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
   * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
   * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
   * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
   * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteSpecRulesBackendRefsFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFilters(obj: HttpRouteSpecRulesBackendRefsFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteSpecRulesBackendRefsFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirect(obj.requestRedirect),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
 * Support: Implementation-specific
 *
 * @schema HttpRouteSpecRulesFiltersExtensionRef
 */
export interface HttpRouteSpecRulesFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersExtensionRef(obj: HttpRouteSpecRulesFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request headers.
 * Support: Core
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   add:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: foo   my-header: bar
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   * Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz
   * Config:   remove: ["my-header1", "my-header3"]
   * Output:   GET /foo HTTP/1.1   my-header2: bar
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value) before the action.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   set:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: bar
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifier(obj: HttpRouteSpecRulesFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesFiltersRequestMirror
 */
export interface HttpRouteSpecRulesFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
   * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
   * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
   * Support: Extended for Kubernetes Service
   * Support: Custom for any other resource
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteSpecRulesFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestMirror(obj: HttpRouteSpecRulesFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteSpecRulesFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
 * Support: Core
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirect
 */
export interface HttpRouteSpecRulesFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteSpecRulesFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used.
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
   * Support: Extended
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteSpecRulesFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   * Support: Core
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestRedirect(obj: HttpRouteSpecRulesFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
 * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
 * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
 * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
 * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
 * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 *
 * @schema HttpRouteSpecRulesFiltersType
 */
export enum HttpRouteSpecRulesFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = 'RequestHeaderModifier',
  /** RequestMirror */
  REQUEST_MIRROR = 'RequestMirror',
  /** RequestRedirect */
  REQUEST_REDIRECT = 'RequestRedirect',
  /** URLRewrite */
  URL_REWRITE = 'URLRewrite',
  /** ExtensionRef */
  EXTENSION_REF = 'ExtensionRef',
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewrite
 */
export interface HttpRouteSpecRulesFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteSpecRulesFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersUrlRewrite(obj: HttpRouteSpecRulesFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
 *
 * @schema HttpRouteSpecRulesMatchesHeaders
 */
export interface HttpRouteSpecRulesMatchesHeaders {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   * When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the header.
   * Support: Core (Exact)
   * Support: Custom (RegularExpression)
   * Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#type
   */
  readonly type?: HttpRouteSpecRulesMatchesHeadersType;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesMatchesHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesHeaders(obj: HttpRouteSpecRulesMatchesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method.
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesMatchesMethod
 */
export enum HttpRouteSpecRulesMatchesMethod {
  /** GET */
  GET = 'GET',
  /** HEAD */
  HEAD = 'HEAD',
  /** POST */
  POST = 'POST',
  /** PUT */
  PUT = 'PUT',
  /** DELETE */
  DELETE = 'DELETE',
  /** CONNECT */
  CONNECT = 'CONNECT',
  /** OPTIONS */
  OPTIONS = 'OPTIONS',
  /** TRACE */
  TRACE = 'TRACE',
  /** PATCH */
  PATCH = 'PATCH',
}

/**
 * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
 *
 * @schema HttpRouteSpecRulesMatchesPath
 */
export interface HttpRouteSpecRulesMatchesPath {
  /**
   * Type specifies how to match against the path Value.
   * Support: Core (Exact, PathPrefix)
   * Support: Custom (RegularExpression)
   *
   * @schema HttpRouteSpecRulesMatchesPath#type
   */
  readonly type?: HttpRouteSpecRulesMatchesPathType;

  /**
   * Value of the HTTP path to match against.
   *
   * @schema HttpRouteSpecRulesMatchesPath#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesPath(obj: HttpRouteSpecRulesMatchesPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
 *
 * @schema HttpRouteSpecRulesMatchesQueryParams
 */
export interface HttpRouteSpecRulesMatchesQueryParams {
  /**
   * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3).
   * If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the query parameter.
   * Support: Extended (Exact)
   * Support: Custom (RegularExpression)
   * Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#type
   */
  readonly type?: HttpRouteSpecRulesMatchesQueryParamsType;

  /**
   * Value is the value of HTTP query param to be matched.
   *
   * @schema HttpRouteSpecRulesMatchesQueryParams#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesMatchesQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesMatchesQueryParams(obj: HttpRouteSpecRulesMatchesQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
 * Support: Implementation-specific
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef
 */
export interface HttpRouteSpecRulesBackendRefsFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersExtensionRef(obj: HttpRouteSpecRulesBackendRefsFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request headers.
 * Support: Core
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   add:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: foo   my-header: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   * Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz
   * Config:   remove: ["my-header1", "my-header3"]
   * Output:   GET /foo HTTP/1.1   my-header2: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value) before the action.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   set:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: bar
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
 * Support: Extended
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirror
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
   * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
   * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
   * Support: Extended for Kubernetes Service
   * Support: Custom for any other resource
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirror(obj: HttpRouteSpecRulesBackendRefsFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
 * Support: Core
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used.
   * Support: Extended
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
   * Support: Extended
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   * Support: Core
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirect(obj: HttpRouteSpecRulesBackendRefsFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
 * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
 * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
 * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
 * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
 * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = 'RequestHeaderModifier',
  /** RequestMirror */
  REQUEST_MIRROR = 'RequestMirror',
  /** RequestRedirect */
  REQUEST_REDIRECT = 'RequestRedirect',
  /** URLRewrite */
  URL_REWRITE = 'URLRewrite',
  /** ExtensionRef */
  EXTENSION_REF = 'ExtensionRef',
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite
 */
export interface HttpRouteSpecRulesBackendRefsFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewrite(obj: HttpRouteSpecRulesBackendRefsFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierAdd(obj: HttpRouteSpecRulesFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet
 */
export interface HttpRouteSpecRulesFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestHeaderModifierSet(obj: HttpRouteSpecRulesFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
 * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
 * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
 * Support: Extended for Kubernetes Service
 * Support: Custom for any other resource
 *
 * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef
 */
export interface HttpRouteSpecRulesFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteSpecRulesFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestMirrorBackendRef(obj: HttpRouteSpecRulesFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectPath
 */
export interface HttpRouteSpecRulesFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteSpecRulesFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersRequestRedirectPath(obj: HttpRouteSpecRulesFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
 * Support: Extended
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectScheme
 */
export enum HttpRouteSpecRulesFiltersRequestRedirectScheme {
  /** http */
  HTTP = 'http',
  /** https */
  HTTPS = 'https',
}

/**
 * Path defines a path rewrite.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewritePath
 */
export interface HttpRouteSpecRulesFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteSpecRulesFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesFiltersUrlRewritePath(obj: HttpRouteSpecRulesFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies how to match against the value of the header.
 * Support: Core (Exact)
 * Support: Custom (RegularExpression)
 * Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
 *
 * @schema HttpRouteSpecRulesMatchesHeadersType
 */
export enum HttpRouteSpecRulesMatchesHeadersType {
  /** Exact */
  EXACT = 'Exact',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * Type specifies how to match against the path Value.
 * Support: Core (Exact, PathPrefix)
 * Support: Custom (RegularExpression)
 *
 * @schema HttpRouteSpecRulesMatchesPathType
 */
export enum HttpRouteSpecRulesMatchesPathType {
  /** Exact */
  EXACT = 'Exact',
  /** PathPrefix */
  PATH_PREFIX = 'PathPrefix',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * Type specifies how to match against the value of the query parameter.
 * Support: Extended (Exact)
 * Support: Custom (RegularExpression)
 * Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
 *
 * @schema HttpRouteSpecRulesMatchesQueryParamsType
 */
export enum HttpRouteSpecRulesMatchesQueryParamsType {
  /** Exact */
  EXACT = 'Exact',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet(obj: HttpRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
 * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
 * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
 * Support: Extended for Kubernetes Service
 * Support: Custom for any other resource
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj: HttpRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath
 */
export interface HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath(obj: HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
 * Support: Extended
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme
 */
export enum HttpRouteSpecRulesBackendRefsFiltersRequestRedirectScheme {
  /** http */
  HTTP = 'http',
  /** https */
  HTTPS = 'https',
}

/**
 * Path defines a path rewrite.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath
 */
export interface HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath(obj: HttpRouteSpecRulesBackendRefsFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesFiltersRequestRedirectPathType
 */
export enum HttpRouteSpecRulesFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesFiltersUrlRewritePathType
 */
export enum HttpRouteSpecRulesFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType
 */
export enum HttpRouteSpecRulesBackendRefsFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}


/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.
 *
 * @schema HTTPRouteV1Beta1
 */
export class HttpRouteV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HTTPRouteV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1beta1',
    kind: 'HTTPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "HTTPRouteV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HttpRouteV1Beta1Props): any {
    return {
      ...HttpRouteV1Beta1.GVK,
      ...toJson_HttpRouteV1Beta1Props(props),
    };
  }

  /**
   * Defines a "HTTPRouteV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HttpRouteV1Beta1Props) {
    super(scope, id, {
      ...HttpRouteV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HttpRouteV1Beta1.GVK,
      ...toJson_HttpRouteV1Beta1Props(resolved),
    };
  }
}

/**
 * HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.
 *
 * @schema HTTPRouteV1Beta1
 */
export interface HttpRouteV1Beta1Props {
  /**
   * @schema HTTPRouteV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of HTTPRoute.
   *
   * @schema HTTPRouteV1Beta1#spec
   */
  readonly spec: HttpRouteV1Beta1Spec;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1Props(obj: HttpRouteV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HttpRouteV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of HTTPRoute.
 *
 * @schema HttpRouteV1Beta1Spec
 */
export interface HttpRouteV1Beta1Spec {
  /**
   * Hostnames defines a set of hostname that should match against the HTTP Host header to select a HTTPRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:
   * 1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label.
   * If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example:
   * * A Listener with `test.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames, or have specified at   least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes   that have either not specified any hostnames or have specified at least   one hostname that matches the Listener hostname. For example,   `*.example.com`, `test.example.com`, and `foo.test.example.com` would   all match. On the other hand, `example.com` and `test.example.net` would   not match.
   * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
   * If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match.
   * If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1Spec#hostnames
   */
  readonly hostnames?: string[];

  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace.
   * The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds.
   * It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway.
   * It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
   *
   * @schema HttpRouteV1Beta1Spec#parentRefs
   */
  readonly parentRefs?: HttpRouteV1Beta1SpecParentRefs[];

  /**
   * Rules are a list of HTTP matchers, filters and actions.
   *
   * @schema HttpRouteV1Beta1Spec#rules
   */
  readonly rules?: HttpRouteV1Beta1SpecRules[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1Spec(obj: HttpRouteV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'parentRefs': obj.parentRefs?.map(y => toJson_HttpRouteV1Beta1SpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_HttpRouteV1Beta1SpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 *
 * @schema HttpRouteV1Beta1SpecParentRefs
 */
export interface HttpRouteV1Beta1SpecParentRefs {
  /**
   * Group is the group of the referent.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   * Support: Core (Gateway)
   * Support: Custom (Other Resources)
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.
   * When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.
   * For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:
   * * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.
   * When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecParentRefs(obj: HttpRouteV1Beta1SpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
 *
 * @schema HttpRouteV1Beta1SpecRules
 */
export interface HttpRouteV1Beta1SpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be sent.
   * Failure behavior here depends on how many BackendRefs are specified and how many are invalid.
   * If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code.
   * See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid.
   * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code.
   * For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined.
   * Support: Core for Kubernetes Service
   * Support: Custom for any other resource
   * Support for weight: Core
   *
   * @schema HttpRouteV1Beta1SpecRules#backendRefs
   */
  readonly backendRefs?: HttpRouteV1Beta1SpecRulesBackendRefs[];

  /**
   * Filters define the filters that are applied to requests that match this rule.
   * The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage.
   * Conformance-levels at this level are defined based on the type of filter:
   * - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across   implementations.
   * Specifying a core filter multiple times has unspecified or custom conformance.
   * All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In all cases where incompatible or unsupported filters are specified, implementations MUST add a warning condition to status.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRules#filters
   */
  readonly filters?: HttpRouteV1Beta1SpecRulesFilters[];

  /**
   * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.
   * For example, take the following matches configuration:
   * ``` matches: - path:     value: "/foo"   headers:   - name: "version"     value: "v2" - path:     value: "/v2/foo" ```
   * For a request to match against this rule, a request must satisfy EITHER of the two conditions:
   * - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo`
   * See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together.
   * If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request.
   * Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize rules based on the following criteria, continuing on ties. Precedence must be given to the Rule with the largest number of:
   * * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching path. * Header matches. * Query param matches.
   * If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:
   * * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by   "{namespace}/{name}".
   * If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.
   * When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
   *
   * @schema HttpRouteV1Beta1SpecRules#matches
   */
  readonly matches?: HttpRouteV1Beta1SpecRulesMatches[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRules(obj: HttpRouteV1Beta1SpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefs(y)),
    'filters': obj.filters?.map(y => toJson_HttpRouteV1Beta1SpecRulesFilters(y)),
    'matches': obj.matches?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatches(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPBackendRef defines how a HTTPRoute should forward an HTTP request.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefs
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefs {
  /**
   * Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here.
   * Support: Custom (For broader support of filters, use the Filters field in HTTPRouteRule.)
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#filters
   */
  readonly filters?: HttpRouteV1Beta1SpecRulesBackendRefsFilters[];

  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.
   * If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.
   * Support for this field varies based on the context where used.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefs(obj: HttpRouteV1Beta1SpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filters': obj.filters?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFilters(y)),
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteV1Beta1SpecRulesFilters
 */
export interface HttpRouteV1Beta1SpecRulesFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
   * Support: Implementation-specific
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteV1Beta1SpecRulesFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request headers.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteV1Beta1SpecRulesFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirect;

  /**
   * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
   * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
   * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
   * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
   * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
   * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteV1Beta1SpecRulesFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFilters(obj: HttpRouteV1Beta1SpecRulesFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteV1Beta1SpecRulesFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirect(obj.requestRedirect),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied.
 * For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header:
 * ``` match:   path:     value: "/foo"   headers:   - name: "version"     value "v1" ```
 *
 * @schema HttpRouteV1Beta1SpecRulesMatches
 */
export interface HttpRouteV1Beta1SpecRulesMatches {
  /**
   * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#headers
   */
  readonly headers?: HttpRouteV1Beta1SpecRulesMatchesHeaders[];

  /**
   * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method.
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#method
   */
  readonly method?: HttpRouteV1Beta1SpecRulesMatchesMethod;

  /**
   * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesMatchesPath;

  /**
   * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatches#queryParams
   */
  readonly queryParams?: HttpRouteV1Beta1SpecRulesMatchesQueryParams[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatches(obj: HttpRouteV1Beta1SpecRulesMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'headers': obj.headers?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatchesHeaders(y)),
    'method': obj.method,
    'path': toJson_HttpRouteV1Beta1SpecRulesMatchesPath(obj.path),
    'queryParams': obj.queryParams?.map(y => toJson_HttpRouteV1Beta1SpecRulesMatchesQueryParams(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFilters {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
   * Support: Implementation-specific
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#extensionRef
   */
  readonly extensionRef?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef;

  /**
   * RequestHeaderModifier defines a schema for a filter that modifies request headers.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestHeaderModifier
   */
  readonly requestHeaderModifier?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier;

  /**
   * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestMirror
   */
  readonly requestMirror?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror;

  /**
   * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#requestRedirect
   */
  readonly requestRedirect?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect;

  /**
   * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
   * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
   * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
   * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
   * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
   * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersType;

  /**
   * URLRewrite defines a schema for a filter that modifies a request during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFilters#urlRewrite
   */
  readonly urlRewrite?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFilters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFilters(obj: HttpRouteV1Beta1SpecRulesBackendRefsFilters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extensionRef': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef(obj.extensionRef),
    'requestHeaderModifier': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier(obj.requestHeaderModifier),
    'requestMirror': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror(obj.requestMirror),
    'requestRedirect': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect(obj.requestRedirect),
    'type': obj.type,
    'urlRewrite': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite(obj.urlRewrite),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
 * Support: Implementation-specific
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef
 */
export interface HttpRouteV1Beta1SpecRulesFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersExtensionRef(obj: HttpRouteV1Beta1SpecRulesFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request headers.
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   add:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: foo   my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   * Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz
   * Config:   remove: ["my-header1", "my-header3"]
   * Output:   GET /foo HTTP/1.1   my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value) before the action.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   set:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirror
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
   * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
   * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
   * Support: Extended for Kubernetes Service
   * Support: Custom for any other resource
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirror(obj: HttpRouteV1Beta1SpecRulesFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used.
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
   * Support: Extended
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   * Support: Core
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirect(obj: HttpRouteV1Beta1SpecRulesFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
 * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
 * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
 * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
 * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
 * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = 'RequestHeaderModifier',
  /** RequestMirror */
  REQUEST_MIRROR = 'RequestMirror',
  /** RequestRedirect */
  REQUEST_REDIRECT = 'RequestRedirect',
  /** URLRewrite */
  URL_REWRITE = 'URLRewrite',
  /** ExtensionRef */
  EXTENSION_REF = 'ExtensionRef',
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite
 */
export interface HttpRouteV1Beta1SpecRulesFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewrite(obj: HttpRouteV1Beta1SpecRulesFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders
 */
export interface HttpRouteV1Beta1SpecRulesMatchesHeaders {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   * When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the header.
   * Support: Core (Exact)
   * Support: Custom (RegularExpression)
   * Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesHeadersType;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesHeaders(obj: HttpRouteV1Beta1SpecRulesMatchesHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method.
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesMethod
 */
export enum HttpRouteV1Beta1SpecRulesMatchesMethod {
  /** GET */
  GET = 'GET',
  /** HEAD */
  HEAD = 'HEAD',
  /** POST */
  POST = 'POST',
  /** PUT */
  PUT = 'PUT',
  /** DELETE */
  DELETE = 'DELETE',
  /** CONNECT */
  CONNECT = 'CONNECT',
  /** OPTIONS */
  OPTIONS = 'OPTIONS',
  /** TRACE */
  TRACE = 'TRACE',
  /** PATCH */
  PATCH = 'PATCH',
}

/**
 * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesPath
 */
export interface HttpRouteV1Beta1SpecRulesMatchesPath {
  /**
   * Type specifies how to match against the path Value.
   * Support: Core (Exact, PathPrefix)
   * Support: Custom (RegularExpression)
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesPath#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesPathType;

  /**
   * Value of the HTTP path to match against.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesPath#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesPath(obj: HttpRouteV1Beta1SpecRulesMatchesPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams
 */
export interface HttpRouteV1Beta1SpecRulesMatchesQueryParams {
  /**
   * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3).
   * If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#name
   */
  readonly name: string;

  /**
   * Type specifies how to match against the value of the query parameter.
   * Support: Extended (Exact)
   * Support: Custom (RegularExpression)
   * Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#type
   */
  readonly type?: HttpRouteV1Beta1SpecRulesMatchesQueryParamsType;

  /**
   * Value is the value of HTTP query param to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParams#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesMatchesQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesMatchesQueryParams(obj: HttpRouteV1Beta1SpecRulesMatchesQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'type': obj.type,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters.
 * Support: Implementation-specific
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#group
   */
  readonly group: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service".
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersExtensionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestHeaderModifier defines a schema for a filter that modifies request headers.
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier {
  /**
   * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   add:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: foo   my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#add
   */
  readonly add?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];

  /**
   * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
   * Input:   GET /foo HTTP/1.1   my-header1: foo   my-header2: bar   my-header3: baz
   * Config:   remove: ["my-header1", "my-header3"]
   * Output:   GET /foo HTTP/1.1   my-header2: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#remove
   */
  readonly remove?: string[];

  /**
   * Set overwrites the request with the given header (name, value) before the action.
   * Input:   GET /foo HTTP/1.1   my-header: foo
   * Config:   set:   - name: "my-header"     value: "bar"
   * Output:   GET /foo HTTP/1.1   my-header: bar
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier#set
   */
  readonly set?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet[];

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifier | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd(y)),
    'remove': obj.remove?.map(y => y),
    'set': obj.set?.map(y => toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.
 * Support: Extended
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror {
  /**
   * BackendRef references a resource where mirrored requests are sent.
   * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
   * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
   * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
   * Support: Extended for Kubernetes Service
   * Support: Custom for any other resource
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror#backendRef
   */
  readonly backendRef: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRef': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj.backendRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.
 * Support: Core
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect {
  /**
   * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname of the request is used.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath;

  /**
   * Port is the port to be used in the value of the `Location` header in the response. When empty, port (if specified) of the request is used.
   * Support: Extended
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#port
   */
  readonly port?: number;

  /**
   * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
   * Support: Extended
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#scheme
   */
  readonly scheme?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme;

  /**
   * StatusCode is the HTTP status code to be used in response.
   * Support: Core
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect#statusCode
   */
  readonly statusCode?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath(obj.path),
    'port': obj.port,
    'scheme': obj.scheme,
    'statusCode': obj.statusCode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:
 * - Core: Filter types and their corresponding configuration defined by   "Support: Core" in this package, e.g. "RequestHeaderModifier". All   implementations must support core filters.
 * - Extended: Filter types and their corresponding configuration defined by   "Support: Extended" in this package, e.g. "RequestMirror". Implementers   are encouraged to support extended filters.
 * - Custom: Filters that are defined and supported by specific vendors.   In the future, filters showing convergence in behavior across multiple   implementations will be considered for inclusion in extended or core   conformance levels. Filter-specific configuration for such filters   is specified using the ExtensionRef field. `Type` should be set to   "ExtensionRef" for custom filters.
 * Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.
 * If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersType {
  /** RequestHeaderModifier */
  REQUEST_HEADER_MODIFIER = 'RequestHeaderModifier',
  /** RequestMirror */
  REQUEST_MIRROR = 'RequestMirror',
  /** RequestRedirect */
  REQUEST_REDIRECT = 'RequestRedirect',
  /** URLRewrite */
  URL_REWRITE = 'URLRewrite',
  /** ExtensionRef */
  EXTENSION_REF = 'ExtensionRef',
}

/**
 * URLRewrite defines a schema for a filter that modifies a request during forwarding.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite {
  /**
   * Hostname is the value to be used to replace the Host header value during forwarding.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite#hostname
   */
  readonly hostname?: string;

  /**
   * Path defines a path rewrite.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite#path
   */
  readonly path?: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostname': obj.hostname,
    'path': toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath(obj.path),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
 * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
 * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
 * Support: Extended for Kubernetes Service
 * Support: Custom for any other resource
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef(obj: HttpRouteV1Beta1SpecRulesFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath
 */
export interface HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath(obj: HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
 * Support: Extended
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme
 */
export enum HttpRouteV1Beta1SpecRulesFiltersRequestRedirectScheme {
  /** http */
  HTTP = 'http',
  /** https */
  HTTPS = 'https',
}

/**
 * Path defines a path rewrite.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath
 */
export interface HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath(obj: HttpRouteV1Beta1SpecRulesFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies how to match against the value of the header.
 * Support: Core (Exact)
 * Support: Custom (RegularExpression)
 * Since RegularExpression HeaderMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesHeadersType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesHeadersType {
  /** Exact */
  EXACT = 'Exact',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * Type specifies how to match against the path Value.
 * Support: Core (Exact, PathPrefix)
 * Support: Custom (RegularExpression)
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesPathType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesPathType {
  /** Exact */
  EXACT = 'Exact',
  /** PathPrefix */
  PATH_PREFIX = 'PathPrefix',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * Type specifies how to match against the value of the query parameter.
 * Support: Extended (Exact)
 * Support: Custom (RegularExpression)
 * Since RegularExpression QueryParamMatchType has custom conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
 *
 * @schema HttpRouteV1Beta1SpecRulesMatchesQueryParamsType
 */
export enum HttpRouteV1Beta1SpecRulesMatchesQueryParamsType {
  /** Exact */
  EXACT = 'Exact',
  /** RegularExpression */
  REGULAR_EXPRESSION = 'RegularExpression',
}

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierAdd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet {
  /**
   * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
   * If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet#name
   */
  readonly name: string;

  /**
   * Value is the value of HTTP Header to be matched.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestHeaderModifierSet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef references a resource where mirrored requests are sent.
 * If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.
 * If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation.
 * In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.
 * Support: Extended for Kubernetes Service
 * Support: Custom for any other resource
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestMirrorBackendRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.
 * Support: Extended
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectScheme {
  /** http */
  HTTP = 'http',
  /** https */
  HTTPS = 'https',
}

/**
 * Path defines a path rewrite.
 * Support: Extended
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath
 */
export interface HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath {
  /**
   * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#replaceFullPath
   */
  readonly replaceFullPath?: string;

  /**
   * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" would be modified to "/bar".
   * Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#replacePrefixMatch
   */
  readonly replacePrefixMatch?: string;

  /**
   * Type defines the type of path modifier. Additional types may be added in a future release of the API.
   * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
   * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
   * <gateway:experimental>
   *
   * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath#type
   */
  readonly type: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType;

}

/**
 * Converts an object of type 'HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath(obj: HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replaceFullPath': obj.replaceFullPath,
    'replacePrefixMatch': obj.replacePrefixMatch,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType
 */
export enum HttpRouteV1Beta1SpecRulesFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersRequestRedirectPathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}

/**
 * Type defines the type of path modifier. Additional types may be added in a future release of the API.
 * Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.
 * Unknown values here must result in the implementation setting the Attached Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
 * <gateway:experimental>
 *
 * @schema HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType
 */
export enum HttpRouteV1Beta1SpecRulesBackendRefsFiltersUrlRewritePathType {
  /** ReplaceFullPath */
  REPLACE_FULL_PATH = 'ReplaceFullPath',
  /** ReplacePrefixMatch */
  REPLACE_PREFIX_MATCH = 'ReplacePrefixMatch',
}


/**
 * ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. 
 Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. 
 All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. 
 Support: Core
 *
 * @schema ReferenceGrant
 */
export class ReferenceGrant extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReferenceGrant"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'ReferenceGrant',
  }

  /**
   * Renders a Kubernetes manifest for "ReferenceGrant".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReferenceGrantProps = {}): any {
    return {
      ...ReferenceGrant.GVK,
      ...toJson_ReferenceGrantProps(props),
    };
  }

  /**
   * Defines a "ReferenceGrant" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ReferenceGrantProps = {}) {
    super(scope, id, {
      ...ReferenceGrant.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReferenceGrant.GVK,
      ...toJson_ReferenceGrantProps(resolved),
    };
  }
}

/**
 * ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy.
 * Each ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within.
 * All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant.
 * Support: Core
 *
 * @schema ReferenceGrant
 */
export interface ReferenceGrantProps {
  /**
   * @schema ReferenceGrant#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of ReferenceGrant.
   *
   * @schema ReferenceGrant#spec
   */
  readonly spec?: ReferenceGrantSpec;

}

/**
 * Converts an object of type 'ReferenceGrantProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferenceGrantProps(obj: ReferenceGrantProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ReferenceGrantSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of ReferenceGrant.
 *
 * @schema ReferenceGrantSpec
 */
export interface ReferenceGrantSpec {
  /**
   * From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list must be considered to be an additional place that references can be valid from, or to put this another way, entries must be combined using OR.
   * Support: Core
   *
   * @schema ReferenceGrantSpec#from
   */
  readonly from: ReferenceGrantSpecFrom[];

  /**
   * To describes the resources that may be referenced by the resources described in "From". Each entry in this list must be considered to be an additional place that references can be valid to, or to put this another way, entries must be combined using OR.
   * Support: Core
   *
   * @schema ReferenceGrantSpec#to
   */
  readonly to: ReferenceGrantSpecTo[];

}

/**
 * Converts an object of type 'ReferenceGrantSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferenceGrantSpec(obj: ReferenceGrantSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_ReferenceGrantSpecFrom(y)),
    'to': obj.to?.map(y => toJson_ReferenceGrantSpecTo(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReferenceGrantFrom describes trusted namespaces and kinds.
 *
 * @schema ReferenceGrantSpecFrom
 */
export interface ReferenceGrantSpecFrom {
  /**
   * Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
   * Support: Core
   *
   * @schema ReferenceGrantSpecFrom#group
   */
  readonly group: string;

  /**
   * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field.
   * When used to permit a SecretObjectReference:
   * * Gateway
   * When used to permit a BackendObjectReference:
   * * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
   *
   * @schema ReferenceGrantSpecFrom#kind
   */
  readonly kind: string;

  /**
   * Namespace is the namespace of the referent.
   * Support: Core
   *
   * @schema ReferenceGrantSpecFrom#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ReferenceGrantSpecFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferenceGrantSpecFrom(obj: ReferenceGrantSpecFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReferenceGrantTo describes what Kinds are allowed as targets of the references.
 *
 * @schema ReferenceGrantSpecTo
 */
export interface ReferenceGrantSpecTo {
  /**
   * Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
   * Support: Core
   *
   * @schema ReferenceGrantSpecTo#group
   */
  readonly group: string;

  /**
   * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field:
   * * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
   *
   * @schema ReferenceGrantSpecTo#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
   *
   * @schema ReferenceGrantSpecTo#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ReferenceGrantSpecTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferenceGrantSpecTo(obj: ReferenceGrantSpecTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * ReferencePolicy identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy. 
 Note: This resource has been renamed to ReferenceGrant. ReferencePolicy will be removed in v0.6.0 in favor of the identical ReferenceGrant resource. 
 Each ReferencePolicy can be used to represent a unique trust relationship. Additional Reference Policies can be used to add to the set of trusted sources of inbound references for the namespace they are defined within. 
 All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant. 
 Support: Core
 *
 * @schema ReferencePolicy
 */
export class ReferencePolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReferencePolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'ReferencePolicy',
  }

  /**
   * Renders a Kubernetes manifest for "ReferencePolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReferencePolicyProps = {}): any {
    return {
      ...ReferencePolicy.GVK,
      ...toJson_ReferencePolicyProps(props),
    };
  }

  /**
   * Defines a "ReferencePolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ReferencePolicyProps = {}) {
    super(scope, id, {
      ...ReferencePolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReferencePolicy.GVK,
      ...toJson_ReferencePolicyProps(resolved),
    };
  }
}

/**
 * ReferencePolicy identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy.
 * Note: This resource has been renamed to ReferenceGrant. ReferencePolicy will be removed in v0.6.0 in favor of the identical ReferenceGrant resource.
 * Each ReferencePolicy can be used to represent a unique trust relationship. Additional Reference Policies can be used to add to the set of trusted sources of inbound references for the namespace they are defined within.
 * All cross-namespace references in Gateway API (with the exception of cross-namespace Gateway-route attachment) require a ReferenceGrant.
 * Support: Core
 *
 * @schema ReferencePolicy
 */
export interface ReferencePolicyProps {
  /**
   * @schema ReferencePolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of ReferencePolicy.
   *
   * @schema ReferencePolicy#spec
   */
  readonly spec?: ReferencePolicySpec;

}

/**
 * Converts an object of type 'ReferencePolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferencePolicyProps(obj: ReferencePolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ReferencePolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of ReferencePolicy.
 *
 * @schema ReferencePolicySpec
 */
export interface ReferencePolicySpec {
  /**
   * From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list must be considered to be an additional place that references can be valid from, or to put this another way, entries must be combined using OR.
   * Support: Core
   *
   * @schema ReferencePolicySpec#from
   */
  readonly from: ReferencePolicySpecFrom[];

  /**
   * To describes the resources that may be referenced by the resources described in "From". Each entry in this list must be considered to be an additional place that references can be valid to, or to put this another way, entries must be combined using OR.
   * Support: Core
   *
   * @schema ReferencePolicySpec#to
   */
  readonly to: ReferencePolicySpecTo[];

}

/**
 * Converts an object of type 'ReferencePolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferencePolicySpec(obj: ReferencePolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_ReferencePolicySpecFrom(y)),
    'to': obj.to?.map(y => toJson_ReferencePolicySpecTo(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReferenceGrantFrom describes trusted namespaces and kinds.
 *
 * @schema ReferencePolicySpecFrom
 */
export interface ReferencePolicySpecFrom {
  /**
   * Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
   * Support: Core
   *
   * @schema ReferencePolicySpecFrom#group
   */
  readonly group: string;

  /**
   * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field.
   * When used to permit a SecretObjectReference:
   * * Gateway
   * When used to permit a BackendObjectReference:
   * * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
   *
   * @schema ReferencePolicySpecFrom#kind
   */
  readonly kind: string;

  /**
   * Namespace is the namespace of the referent.
   * Support: Core
   *
   * @schema ReferencePolicySpecFrom#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ReferencePolicySpecFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferencePolicySpecFrom(obj: ReferencePolicySpecFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReferenceGrantTo describes what Kinds are allowed as targets of the references.
 *
 * @schema ReferencePolicySpecTo
 */
export interface ReferencePolicySpecTo {
  /**
   * Group is the group of the referent. When empty, the Kubernetes core API group is inferred.
   * Support: Core
   *
   * @schema ReferencePolicySpecTo#group
   */
  readonly group: string;

  /**
   * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field:
   * * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
   *
   * @schema ReferencePolicySpecTo#kind
   */
  readonly kind: string;

  /**
   * Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
   *
   * @schema ReferencePolicySpecTo#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ReferencePolicySpecTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReferencePolicySpecTo(obj: ReferencePolicySpecTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * TCPRoute provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward connections on the port specified by the listener to a set of backends specified by the TCPRoute.
 *
 * @schema TCPRoute
 */
export class TcpRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TCPRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'TCPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "TCPRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TcpRouteProps): any {
    return {
      ...TcpRoute.GVK,
      ...toJson_TcpRouteProps(props),
    };
  }

  /**
   * Defines a "TCPRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TcpRouteProps) {
    super(scope, id, {
      ...TcpRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TcpRoute.GVK,
      ...toJson_TcpRouteProps(resolved),
    };
  }
}

/**
 * TCPRoute provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward connections on the port specified by the listener to a set of backends specified by the TCPRoute.
 *
 * @schema TCPRoute
 */
export interface TcpRouteProps {
  /**
   * @schema TCPRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of TCPRoute.
   *
   * @schema TCPRoute#spec
   */
  readonly spec: TcpRouteSpec;

}

/**
 * Converts an object of type 'TcpRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TcpRouteProps(obj: TcpRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TcpRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of TCPRoute.
 *
 * @schema TcpRouteSpec
 */
export interface TcpRouteSpec {
  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace.
   * The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds.
   * It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway.
   * It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
   *
   * @schema TcpRouteSpec#parentRefs
   */
  readonly parentRefs?: TcpRouteSpecParentRefs[];

  /**
   * Rules are a list of TCP matchers and actions.
   *
   * @schema TcpRouteSpec#rules
   */
  readonly rules: TcpRouteSpecRules[];

}

/**
 * Converts an object of type 'TcpRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TcpRouteSpec(obj: TcpRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parentRefs': obj.parentRefs?.map(y => toJson_TcpRouteSpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_TcpRouteSpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 *
 * @schema TcpRouteSpecParentRefs
 */
export interface TcpRouteSpecParentRefs {
  /**
   * Group is the group of the referent.
   * Support: Core
   *
   * @schema TcpRouteSpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   * Support: Core (Gateway)
   * Support: Custom (Other Resources)
   *
   * @schema TcpRouteSpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   * Support: Core
   *
   * @schema TcpRouteSpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route.
   * Support: Core
   *
   * @schema TcpRouteSpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.
   * When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.
   * For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema TcpRouteSpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:
   * * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.
   * When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Core
   *
   * @schema TcpRouteSpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'TcpRouteSpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TcpRouteSpecParentRefs(obj: TcpRouteSpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPRouteRule is the configuration for a given rule.
 *
 * @schema TcpRouteSpecRules
 */
export interface TcpRouteSpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Connection rejections must respect weight; if an invalid backend is requested to have 80% of connections, then 80% of connections must be rejected instead.
   * Support: Core for Kubernetes Service
   * Support: Custom for any other resource
   * Support for weight: Extended
   *
   * @schema TcpRouteSpecRules#backendRefs
   */
  readonly backendRefs?: TcpRouteSpecRulesBackendRefs[];

}

/**
 * Converts an object of type 'TcpRouteSpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TcpRouteSpecRules(obj: TcpRouteSpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_TcpRouteSpecRulesBackendRefs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef defines how a Route should forward a request to a Kubernetes resource.
 * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
 *
 * @schema TcpRouteSpecRulesBackendRefs
 */
export interface TcpRouteSpecRulesBackendRefs {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema TcpRouteSpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema TcpRouteSpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TcpRouteSpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema TcpRouteSpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema TcpRouteSpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.
   * If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.
   * Support for this field varies based on the context where used.
   *
   * @schema TcpRouteSpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'TcpRouteSpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TcpRouteSpecRulesBackendRefs(obj: TcpRouteSpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * The TLSRoute resource is similar to TCPRoute, but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for a given TLS listener. 
 If you need to forward traffic to a single target for a TLS listener, you could choose to use a TCPRoute with a TLS listener.
 *
 * @schema TLSRoute
 */
export class TlsRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TLSRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'TLSRoute',
  }

  /**
   * Renders a Kubernetes manifest for "TLSRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TlsRouteProps): any {
    return {
      ...TlsRoute.GVK,
      ...toJson_TlsRouteProps(props),
    };
  }

  /**
   * Defines a "TLSRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TlsRouteProps) {
    super(scope, id, {
      ...TlsRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TlsRoute.GVK,
      ...toJson_TlsRouteProps(resolved),
    };
  }
}

/**
 * The TLSRoute resource is similar to TCPRoute, but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for a given TLS listener.
 * If you need to forward traffic to a single target for a TLS listener, you could choose to use a TCPRoute with a TLS listener.
 *
 * @schema TLSRoute
 */
export interface TlsRouteProps {
  /**
   * @schema TLSRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of TLSRoute.
   *
   * @schema TLSRoute#spec
   */
  readonly spec: TlsRouteSpec;

}

/**
 * Converts an object of type 'TlsRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsRouteProps(obj: TlsRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TlsRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of TLSRoute.
 *
 * @schema TlsRouteSpec
 */
export interface TlsRouteSpec {
  /**
   * Hostnames defines a set of SNI names that should match against the SNI attribute of TLS ClientHello message in TLS handshake. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:
   * 1. IPs are not allowed in SNI names per RFC 6066. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard    label must appear by itself as the first label.
   * If a hostname is specified by both the Listener and TLSRoute, there must be at least one intersecting hostname for the TLSRoute to be attached to the Listener. For example:
   * * A Listener with `test.example.com` as the hostname matches TLSRoutes   that have either not specified any hostnames, or have specified at   least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches TLSRoutes   that have either not specified any hostnames or have specified at least   one hostname that matches the Listener hostname. For example,   `test.example.com` and `*.example.com` would both match. On the other   hand, `example.com` and `test.example.net` would not match.
   * If both the Listener and TLSRoute have specified hostnames, any TLSRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the TLSRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match.
   * If both the Listener and TLSRoute have specified hostnames, and none match with the criteria above, then the TLSRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.
   * Support: Core
   *
   * @schema TlsRouteSpec#hostnames
   */
  readonly hostnames?: string[];

  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace.
   * The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds.
   * It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway.
   * It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
   *
   * @schema TlsRouteSpec#parentRefs
   */
  readonly parentRefs?: TlsRouteSpecParentRefs[];

  /**
   * Rules are a list of TLS matchers and actions.
   *
   * @schema TlsRouteSpec#rules
   */
  readonly rules: TlsRouteSpecRules[];

}

/**
 * Converts an object of type 'TlsRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsRouteSpec(obj: TlsRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'parentRefs': obj.parentRefs?.map(y => toJson_TlsRouteSpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_TlsRouteSpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 *
 * @schema TlsRouteSpecParentRefs
 */
export interface TlsRouteSpecParentRefs {
  /**
   * Group is the group of the referent.
   * Support: Core
   *
   * @schema TlsRouteSpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   * Support: Core (Gateway)
   * Support: Custom (Other Resources)
   *
   * @schema TlsRouteSpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   * Support: Core
   *
   * @schema TlsRouteSpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route.
   * Support: Core
   *
   * @schema TlsRouteSpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.
   * When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.
   * For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema TlsRouteSpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:
   * * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.
   * When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Core
   *
   * @schema TlsRouteSpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'TlsRouteSpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsRouteSpecParentRefs(obj: TlsRouteSpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLSRouteRule is the configuration for a given rule.
 *
 * @schema TlsRouteSpecRules
 */
export interface TlsRouteSpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the rule performs no forwarding; if no filters are specified that would result in a response being sent, the underlying implementation must actively reject request attempts to this backend, by rejecting the connection or returning a 500 status code. Request rejections must respect weight; if an invalid backend is requested to have 80% of requests, then 80% of requests must be rejected instead.
   * Support: Core for Kubernetes Service
   * Support: Custom for any other resource
   * Support for weight: Extended
   *
   * @schema TlsRouteSpecRules#backendRefs
   */
  readonly backendRefs?: TlsRouteSpecRulesBackendRefs[];

}

/**
 * Converts an object of type 'TlsRouteSpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsRouteSpecRules(obj: TlsRouteSpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_TlsRouteSpecRulesBackendRefs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef defines how a Route should forward a request to a Kubernetes resource.
 * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
 *
 * @schema TlsRouteSpecRulesBackendRefs
 */
export interface TlsRouteSpecRulesBackendRefs {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema TlsRouteSpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema TlsRouteSpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TlsRouteSpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema TlsRouteSpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema TlsRouteSpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.
   * If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.
   * Support for this field varies based on the context where used.
   *
   * @schema TlsRouteSpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'TlsRouteSpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TlsRouteSpecRulesBackendRefs(obj: TlsRouteSpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * UDPRoute provides a way to route UDP traffic. When combined with a Gateway listener, it can be used to forward traffic on the port specified by the listener to a set of backends specified by the UDPRoute.
 *
 * @schema UDPRoute
 */
export class UdpRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "UDPRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'gateway.networking.k8s.io/v1alpha2',
    kind: 'UDPRoute',
  }

  /**
   * Renders a Kubernetes manifest for "UDPRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: UdpRouteProps): any {
    return {
      ...UdpRoute.GVK,
      ...toJson_UdpRouteProps(props),
    };
  }

  /**
   * Defines a "UDPRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: UdpRouteProps) {
    super(scope, id, {
      ...UdpRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...UdpRoute.GVK,
      ...toJson_UdpRouteProps(resolved),
    };
  }
}

/**
 * UDPRoute provides a way to route UDP traffic. When combined with a Gateway listener, it can be used to forward traffic on the port specified by the listener to a set of backends specified by the UDPRoute.
 *
 * @schema UDPRoute
 */
export interface UdpRouteProps {
  /**
   * @schema UDPRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec defines the desired state of UDPRoute.
   *
   * @schema UDPRoute#spec
   */
  readonly spec: UdpRouteSpec;

}

/**
 * Converts an object of type 'UdpRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UdpRouteProps(obj: UdpRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_UdpRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec defines the desired state of UDPRoute.
 *
 * @schema UdpRouteSpec
 */
export interface UdpRouteSpec {
  /**
   * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace.
   * The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources such as one of the route kinds.
   * It is invalid to reference an identical parent more than once. It is valid to reference multiple distinct sections within the same parent resource, such as 2 Listeners within a Gateway.
   * It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.
   *
   * @schema UdpRouteSpec#parentRefs
   */
  readonly parentRefs?: UdpRouteSpecParentRefs[];

  /**
   * Rules are a list of UDP matchers and actions.
   *
   * @schema UdpRouteSpec#rules
   */
  readonly rules: UdpRouteSpecRules[];

}

/**
 * Converts an object of type 'UdpRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UdpRouteSpec(obj: UdpRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parentRefs': obj.parentRefs?.map(y => toJson_UdpRouteSpecParentRefs(y)),
    'rules': obj.rules?.map(y => toJson_UdpRouteSpecRules(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.
 * The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
 *
 * @schema UdpRouteSpecParentRefs
 */
export interface UdpRouteSpecParentRefs {
  /**
   * Group is the group of the referent.
   * Support: Core
   *
   * @schema UdpRouteSpecParentRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent.
   * Support: Core (Gateway)
   * Support: Custom (Other Resources)
   *
   * @schema UdpRouteSpecParentRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   * Support: Core
   *
   * @schema UdpRouteSpecParentRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route.
   * Support: Core
   *
   * @schema UdpRouteSpecParentRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.
   * When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.
   * For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Extended
   * <gateway:experimental>
   *
   * @schema UdpRouteSpecParentRefs#port
   */
  readonly port?: number;

  /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:
   * * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.
   * Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.
   * When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.
   * Support: Core
   *
   * @schema UdpRouteSpecParentRefs#sectionName
   */
  readonly sectionName?: string;

}

/**
 * Converts an object of type 'UdpRouteSpecParentRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UdpRouteSpecParentRefs(obj: UdpRouteSpecParentRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'sectionName': obj.sectionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * UDPRouteRule is the configuration for a given rule.
 *
 * @schema UdpRouteSpecRules
 */
export interface UdpRouteSpecRules {
  /**
   * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Packet drops must respect weight; if an invalid backend is requested to have 80% of the packets, then 80% of packets must be dropped instead.
   * Support: Core for Kubernetes Service Support: Custom for any other resource
   * Support for weight: Extended
   *
   * @schema UdpRouteSpecRules#backendRefs
   */
  readonly backendRefs?: UdpRouteSpecRulesBackendRefs[];

}

/**
 * Converts an object of type 'UdpRouteSpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UdpRouteSpecRules(obj: UdpRouteSpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backendRefs': obj.backendRefs?.map(y => toJson_UdpRouteSpecRulesBackendRefs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * BackendRef defines how a Route should forward a request to a Kubernetes resource.
 * Note that when a namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
 *
 * @schema UdpRouteSpecRulesBackendRefs
 */
export interface UdpRouteSpecRulesBackendRefs {
  /**
   * Group is the group of the referent. For example, "networking.k8s.io". When unspecified (empty string), core API group is inferred.
   *
   * @schema UdpRouteSpecRulesBackendRefs#group
   */
  readonly group?: string;

  /**
   * Kind is kind of the referent. For example "HTTPRoute" or "Service". Defaults to "Service" when not specified.
   *
   * @default Service" when not specified.
   * @schema UdpRouteSpecRulesBackendRefs#kind
   */
  readonly kind?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema UdpRouteSpecRulesBackendRefs#name
   */
  readonly name: string;

  /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.
   * Note that when a different namespace is specified, a ReferenceGrant object with ReferenceGrantTo.Kind=Service is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
   * Support: Core
   *
   * @schema UdpRouteSpecRulesBackendRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. For other resources, destination port might be derived from the referent resource or this field.
   *
   * @schema UdpRouteSpecRulesBackendRefs#port
   */
  readonly port?: number;

  /**
   * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.
   * If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.
   * Support for this field varies based on the context where used.
   *
   * @schema UdpRouteSpecRulesBackendRefs#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'UdpRouteSpecRulesBackendRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_UdpRouteSpecRulesBackendRefs(obj: UdpRouteSpecRulesBackendRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'port': obj.port,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

