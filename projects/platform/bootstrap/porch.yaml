apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: packagerevs.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: PackageRev
    listKind: PackageRevList
    plural: packagerevs
    singular: packagerev
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PackageRev
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PackageRevSpec defines the desired state of PackageRev
            type: object
          status:
            description: PackageRevStatus defines the observed state of PackageRev
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: remoterootsyncsets.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: RemoteRootSyncSet
    listKind: RemoteRootSyncSetList
    plural: remoterootsyncsets
    singular: remoterootsyncset
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.aggregated.applied
      name: AppliedCount
      type: integer
    - jsonPath: .status.aggregated.ready
      name: ReadyCount
      type: integer
    - jsonPath: .status.aggregated.total
      name: Total
      type: integer
    - jsonPath: .status.aggregated.conditions[?(@.type=='Applied')].reason
      name: Applied
      type: string
    - jsonPath: .status.aggregated.conditions[?(@.type=='Ready')].reason
      name: Ready
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "RemoteRootSyncSet represents applying a package to multiple target clusters. In future, this should use ConfigSync, but while we're iterating on OCI/porch support, and making a few similar iterations (e.g. what feedback do we need for rollout), we're just applying directly to the target cluster(s). \n We follow the \"managed remote objects\" pattern; we don't want to create a mirror object, so we start with the \"ReplicaSet\" of Pod/ReplicaSet/Deployment. \n spec.clusterRefs specifies the target clusters \n spec.template maps to the spec of our \"Pod\", in this case a ConfigSync RootSync/RepoSync. Because we're not actually using ConfigSync in this prototype, we are only defining a small subset of fields."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteRootSyncSetSpec defines the desired state of RemoteRootSync
            properties:
              clusterRefs:
                items:
                  properties:
                    apiVersion:
                      type: string
                    kind:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                type: array
              template:
                properties:
                  oci:
                    description: Git          *GitInfo `json:"git,omitempty"`
                    properties:
                      repository:
                        type: string
                    type: object
                  sourceFormat:
                    type: string
                type: object
            type: object
          status:
            description: RootSyncSetStatus defines the observed state of RootSyncSet
            properties:
              aggregated:
                properties:
                  applied:
                    format: int32
                    type: integer
                  conditions:
                    description: Conditions describes the reconciliation state of the object.
                    items:
                      description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                      properties:
                        lastTransitionTime:
                          description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                          format: date-time
                          type: string
                        message:
                          description: message is a human readable message indicating details about the transition. This may be an empty string.
                          maxLength: 32768
                          type: string
                        observedGeneration:
                          description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                          format: int64
                          minimum: 0
                          type: integer
                        reason:
                          description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                          maxLength: 1024
                          minLength: 1
                          pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                          type: string
                        status:
                          description: status of the condition, one of True, False, Unknown.
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                          type: string
                      required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                      type: object
                    type: array
                  ready:
                    format: int32
                    type: integer
                  total:
                    format: int32
                    type: integer
                required:
                - applied
                - ready
                - total
                type: object
              targets:
                items:
                  properties:
                    conditions:
                      description: Conditions describes the reconciliation state of the object.
                      items:
                        description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                        properties:
                          lastTransitionTime:
                            description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: message is a human readable message indicating details about the transition. This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False, Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - lastTransitionTime
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    ref:
                      properties:
                        apiVersion:
                          type: string
                        kind:
                          type: string
                        name:
                          type: string
                        namespace:
                          type: string
                      type: object
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: repositories.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: Repository
    listKind: RepositoryList
    plural: repositories
    singular: repository
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .spec.content
      name: Content
      type: string
    - jsonPath: .spec.deployment
      name: Deployment
      type: boolean
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .spec['git','oci']['repo','registry']
      name: Address
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Repository
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: "RepositorySpec defines the desired state of Repository \n Notes: - deployment repository - in KRM API ConfigSync would be configured directly? (or via this API)"
            properties:
              content:
                description: 'Content stored in the repository (i.e. Function, Package - the literal values correspond to the API resource names). TODO: support repository with mixed content?'
                type: string
              deployment:
                description: The repository is a deployment repository; final packages in this repository are deployment ready.
                type: boolean
              description:
                description: User-friendly description of the repository
                type: string
              git:
                description: Git repository details. Required if `type` is `git`. Ignored if `type` is not `git`.
                properties:
                  branch:
                    description: Name of the branch containing the packages. Finalized packages will be committed to this branch (if the repository allows write access). If unspecified, defaults to "main".
                    type: string
                  createBranch:
                    description: CreateBranch specifies if Porch should create the package branch if it doesn't exist.
                    type: boolean
                  directory:
                    description: Directory within the Git repository where the packages are stored. A subdirectory of this directory containing a Kptfile is considered a package. If unspecified, defaults to root directory.
                    type: string
                  repo:
                    description: 'Address of the Git repository, for example: `https://github.com/GoogleCloudPlatform/blueprints.git`'
                    type: string
                  secretRef:
                    description: Reference to secret containing authentication credentials.
                    properties:
                      name:
                        description: Name of the secret. The secret is expected to be located in the same namespace as the resource containing the reference.
                        type: string
                    required:
                    - name
                    type: object
                required:
                - repo
                type: object
              mutators:
                description: '`Mutators` specifies list of functions to be added to the list of package''s mutators on changes to the packages in the repository to ensure the packages meet constraints enforced by the mutators associated with the repository. Based on the Kubernetest Admission Controllers (https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/). The functions will be evaluated in the order specified in the list.'
                items:
                  properties:
                    configMap:
                      additionalProperties:
                        type: string
                      description: '`ConfigMap` specifies the function config (https://kpt.dev/reference/cli/fn/eval/).'
                      type: object
                    functionRef:
                      description: '`FunctionRef` specifies the function by reference to a Function resource. Mutually exclusive with `Image`.'
                      properties:
                        name:
                          description: '`Name` is the name of the `Function` resource referenced. The resource is expected to be within the same namespace.'
                          type: string
                      required:
                      - name
                      type: object
                    image:
                      description: '`Image` specifies the function image, such as `gcr.io/kpt-fn/gatekeeper:v0.2`. Use of `Image` is mutually exclusive with `FunctionRef`.'
                      type: string
                  type: object
                type: array
              oci:
                description: OCI repository details. Required if `type` is `oci`. Ignored if `type` is not `oci`.
                properties:
                  registry:
                    description: Registry is the address of the OCI registry
                    type: string
                  secretRef:
                    description: Reference to secret containing authentication credentials.
                    properties:
                      name:
                        description: Name of the secret. The secret is expected to be located in the same namespace as the resource containing the reference.
                        type: string
                    required:
                    - name
                    type: object
                required:
                - registry
                type: object
              type:
                description: Type of the repository (i.e. git, OCI)
                type: string
              upstream:
                description: Upstream is the default upstream repository for packages in this repository. Specifying it per repository allows simpler UX when creating packages.
                properties:
                  git:
                    description: Git repository details. Required if `type` is `git`. Must be unspecified if `type` is not `git`.
                    properties:
                      branch:
                        description: Name of the branch containing the packages. Finalized packages will be committed to this branch (if the repository allows write access). If unspecified, defaults to "main".
                        type: string
                      createBranch:
                        description: CreateBranch specifies if Porch should create the package branch if it doesn't exist.
                        type: boolean
                      directory:
                        description: Directory within the Git repository where the packages are stored. A subdirectory of this directory containing a Kptfile is considered a package. If unspecified, defaults to root directory.
                        type: string
                      repo:
                        description: 'Address of the Git repository, for example: `https://github.com/GoogleCloudPlatform/blueprints.git`'
                        type: string
                      secretRef:
                        description: Reference to secret containing authentication credentials.
                        properties:
                          name:
                            description: Name of the secret. The secret is expected to be located in the same namespace as the resource containing the reference.
                            type: string
                        required:
                        - name
                        type: object
                    required:
                    - repo
                    type: object
                  oci:
                    description: OCI repository details. Required if `type` is `oci`. Must be unspecified if `type` is not `oci`.
                    properties:
                      registry:
                        description: Registry is the address of the OCI registry
                        type: string
                      secretRef:
                        description: Reference to secret containing authentication credentials.
                        properties:
                          name:
                            description: Name of the secret. The secret is expected to be located in the same namespace as the resource containing the reference.
                            type: string
                        required:
                        - name
                        type: object
                    required:
                    - registry
                    type: object
                  repositoryRef:
                    description: RepositoryRef contains a reference to an existing Repository resource to be used as the default upstream repository.
                    properties:
                      name:
                        description: Name of the Repository resource referenced.
                        type: string
                    required:
                    - name
                    type: object
                  type:
                    description: Type of the repository (i.e. git, OCI). If empty, repositoryRef will be used.
                    type: string
                type: object
              validators:
                description: '`Validators` specifies list of functions to be added to the list of package''s validators on changes to the packages in the repository to ensure the packages meet constraints enforced by the validators associated with the repository. Based on the Kubernetest Admission Controllers (https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/). The functions will be evaluated in the order specified in the list.'
                items:
                  properties:
                    configMap:
                      additionalProperties:
                        type: string
                      description: '`ConfigMap` specifies the function config (https://kpt.dev/reference/cli/fn/eval/).'
                      type: object
                    functionRef:
                      description: '`FunctionRef` specifies the function by reference to a Function resource. Mutually exclusive with `Image`.'
                      properties:
                        name:
                          description: '`Name` is the name of the `Function` resource referenced. The resource is expected to be within the same namespace.'
                          type: string
                      required:
                      - name
                      type: object
                    image:
                      description: '`Image` specifies the function image, such as `gcr.io/kpt-fn/gatekeeper:v0.2`. Use of `Image` is mutually exclusive with `FunctionRef`.'
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: RepositoryStatus defines the observed state of Repository
            properties:
              conditions:
                description: Conditions describes the reconciliation state of the object.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: rootsyncsets.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: RootSyncSet
    listKind: RootSyncSetList
    plural: rootsyncsets
    singular: rootsyncset
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RootSyncSet is the Schema for the rootsyncsets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RootSyncSetSpec defines the desired state of RootSyncSet
            properties:
              clusterRefs:
                items:
                  properties:
                    apiVersion:
                      type: string
                    kind:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                type: array
              template:
                properties:
                  spec:
                    properties:
                      git:
                        properties:
                          auth:
                            type: string
                          branch:
                            type: string
                          dir:
                            type: string
                          gcpServiceAccountEmail:
                            type: string
                          noSSLVerify:
                            type: boolean
                          period:
                            type: string
                          proxy:
                            type: string
                          repo:
                            type: string
                          revision:
                            type: string
                          secretRef:
                            description: SecretReference contains the reference to the secret used to connect to Git source of truth.
                            properties:
                              name:
                                description: Name represents the secret name.
                                type: string
                            type: object
                        required:
                        - auth
                        - repo
                        type: object
                      sourceFormat:
                        type: string
                    type: object
                type: object
            type: object
          status:
            description: RootSyncSetStatus defines the observed state of RootSyncSet
            properties:
              clusterRefStatuses:
                items:
                  properties:
                    apiVersion:
                      type: string
                    kind:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                    syncStatus:
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions describes the reconciliation state of the object.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: workloadidentitybindings.config.porch.kpt.dev
spec:
  group: config.porch.kpt.dev
  names:
    kind: WorkloadIdentityBinding
    listKind: WorkloadIdentityBindingList
    plural: workloadidentitybindings
    singular: workloadidentitybinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Ready
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: WorkloadIdentityBinding
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: WorkloadIdentityBindingSpec defines the desired state of WorkloadIdentityBinding
            properties:
              gcpServiceAccountRef:
                properties:
                  external:
                    type: string
                  name:
                    type: string
                  namespace:
                    type: string
                type: object
              kubernetesServiceAccountRef:
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                type: object
            type: object
          status:
            description: WorkloadIdentityBindingStatus defines the observed state of WorkloadIdentityBinding
            properties:
              conditions:
                description: Conditions describes the reconciliation state of the object.
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: v1
kind: Namespace
metadata:
  name: porch-system
---
apiVersion: v1
kind: Namespace
metadata:
  name: porch-fn-system
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: porch-fn-runner
  namespace: porch-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: function-runner
  namespace: porch-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: function-runner
  template:
    metadata:
      labels:
        app: function-runner
    spec:
      serviceAccountName: porch-fn-runner
      containers:
        - name: function-runner
          image: gcr.io/kpt-dev/porch-function-runner:v0.0.12
          imagePullPolicy: IfNotPresent
          command:
            - /server
            - --config=/config.yaml
            - --functions=/functions
            - --pod-namespace=porch-fn-system
          env:
            - name: WRAPPER_SERVER_IMAGE
              value: gcr.io/kpt-dev/porch-wrapper-server:v0.0.12
          ports:
            - containerPort: 9445
          # Add grpc readiness probe to ensure the cache is ready
          readinessProbe:
            exec:
              command:
                - /grpc-health-probe
                - -addr
                - localhost:9445
          resources:
            requests:
              memory: 64Mi
              cpu: 125m
          volumeMounts:
            - mountPath: /pod-cache-config
              name: pod-cache-config-volume
      volumes:
        - name: pod-cache-config-volume
          configMap:
            name: pod-cache-config
---
apiVersion: v1
kind: Service
metadata:
  name: function-runner
  namespace: porch-system
spec:
  selector:
    app: function-runner
  ports:
    - port: 9445
      protocol: TCP
      targetPort: 9445
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-cache-config
  namespace: porch-system
data:
  pod-cache-config.yaml: |
    gcr.io/kpt-fn/apply-replacements:v0.1.1: 30m
    gcr.io/kpt-fn/apply-setters:v0.2.0: 30m
    gcr.io/kpt-fn/create-setters:v0.1.0: 30m
    gcr.io/kpt-fn/ensure-name-substring:v0.2.0: 30m
    gcr.io/kpt-fn/gatekeeper:v0.2.1: 30m
    gcr.io/kpt-fn/kubeval:v0.2.0: 30m
    gcr.io/kpt-fn/search-replace:v0.2.0: 30m
    gcr.io/kpt-fn/set-annotations:v0.1.4: 30m
    gcr.io/kpt-fn/set-enforcement-action:v0.1.0: 30m
    gcr.io/kpt-fn/set-image:v0.1.1: 30m
    gcr.io/kpt-fn/set-labels:v0.1.5: 30m
    gcr.io/kpt-fn/set-namespace:v0.4.1: 30m
    gcr.io/kpt-fn/starlark:v0.4.3: 30m
    gcr.io/kpt-fn/upsert-resource:v0.2.0: 30m
    gcr.io/kpt-fn/enable-gcp-services:v0.1.0: 30m
    gcr.io/kpt-fn/export-terraform:v0.1.0: 30m
    gcr.io/kpt-fn/generate-folders:v0.1.1: 30m
    gcr.io/kpt-fn/remove-local-config-resources:v0.1.0: 30m
    gcr.io/kpt-fn/set-project-id:v0.2.0: 30m
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: porch-server
  namespace: porch-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: porch-server
  namespace: porch-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: porch-server
  template:
    metadata:
      labels:
        app: porch-server
    spec:
      serviceAccountName: porch-server
      volumes:
        - name: cache-volume
          emptyDir: {}
      containers:
        - name: porch-server
          # Update image to the image of your porch apiserver build.
          image: gcr.io/kpt-dev/porch-server:v0.0.12
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 512Mi
          volumeMounts:
            - mountPath: /cache
              name: cache-volume
          env:
            # Uncomment to enable trace-reporting to jaeger
            #- name: OTEL
            #  value: otel://jaeger-oltp:4317
            - name: OTEL_SERVICE_NAME
              value: porch-server
          args:
            - --function-runner=function-runner:9445
            - --cache-directory=/cache
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: porch-system
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 443
  selector:
    app: porch-server
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.porch.kpt.dev
spec:
  insecureSkipTLSVerify: true
  group: porch.kpt.dev
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: api
    namespace: porch-system
  version: v1alpha1
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aggregated-apiserver-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - secrets
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - porch.kpt.dev
    resources:
      - functions
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - config.porch.kpt.dev
    resources:
      - repositories
      - repositories/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - config.porch.kpt.dev
    resources:
      - packagerevs
      - packagerevs/status
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  # Needed for priority and fairness
  - apiGroups:
      - flowcontrol.apiserver.k8s.io
    resources:
      - flowschemas
      - prioritylevelconfigurations
    verbs:
      - get
      - watch
      - list
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aggregated-apiserver-role
  namespace: porch-system
rules:
  # Needed for workload identity
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - serviceaccounts/token
    verbs:
      - create
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: porch-function-executor
  namespace: porch-fn-system
rules:
  # Needed to launch / read function executor pods
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - patch
      - get
      - watch
      - list
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sample-apiserver-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aggregated-apiserver-clusterrole
subjects:
  - kind: ServiceAccount
    name: porch-server
    namespace: porch-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sample-apiserver-rolebinding
  namespace: porch-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aggregated-apiserver-role
subjects:
  - kind: ServiceAccount
    name: porch-server
    namespace: porch-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: porch-function-executor
  namespace: porch-fn-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: porch-function-executor
subjects:
  - kind: ServiceAccount
    name: porch-fn-runner
    namespace: porch-system
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: porch-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: porch-server
  namespace: porch-system
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: porch:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: porch-server
  namespace: porch-system
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: porch-controllers
  namespace: porch-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: porch-controllers
  namespace: porch-system
  labels:
    k8s-app: porch-controllers
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: porch-controllers
  template:
    metadata:
      labels:
        k8s-app: porch-controllers
    spec:
      serviceAccountName: porch-controllers
      containers:
      - name: porch-controllers
        # Update to the image of your porch-controllers build.
        image: gcr.io/kpt-dev/porch-controllers:v0.0.12
        env:
        - name: ENABLE_WORKLOADIDENTITYBINDINGS
          value: "true"
        - name: ENABLE_REMOTEROOTSYNCSETS
          value: "true"
        - name: ENABLE_ROOTSYNCSETS
          value: "true"
        - name: GCP_PROJECT_ID
          value: example-google-project-id
        - name: HACK_ENABLE_LOOPBACK
          value: "1"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: porch-controllers
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: porch-controllers-remoterootsyncsets
rules:
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - remoterootsyncsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - remoterootsyncsets/finalizers
  verbs:
  - update
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - remoterootsyncsets/status
  verbs:
  - get
  - patch
  - update
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: porch-system:porch-controllers-remoterootsyncsets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: porch-controllers-remoterootsyncsets
subjects:
- kind: ServiceAccount
  name: porch-controllers
  namespace: porch-system
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: porch-controllers-rootsyncsets
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - rootsyncsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - rootsyncsets/finalizers
  verbs:
  - update
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - rootsyncsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configcontroller.cnrm.cloud.google.com
  resources:
  - configcontrollerinstances
  verbs:
  - get
  - list
- apiGroups:
  - container.cnrm.cloud.google.com
  resources:
  - containerclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - core.cnrm.cloud.google.com
  resources:
  - configconnectorcontexts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - hub.gke.io
  resources:
  - memberships
  verbs:
  - get
  - list
  - watch
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: porch-system:porch-controllers-rootsyncsets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: porch-controllers-rootsyncsets
subjects:
- kind: ServiceAccount
  name: porch-controllers
  namespace: porch-system
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: porch-controllers-workloadidentitybinding
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - workloadidentitybindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - workloadidentitybindings/finalizers
  verbs:
  - update
- apiGroups:
  - config.porch.kpt.dev
  resources:
  - workloadidentitybindings/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - iam.cnrm.cloud.google.com
  resources:
  - iampolicymembers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - iam.cnrm.cloud.google.com
  resources:
  - iamserviceaccounts
  verbs:
  - get
  - list
  - watch
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: porch-system:porch-controllers-workloadidentitybinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: porch-controllers-workloadidentitybinding
subjects:
- kind: ServiceAccount
  name: porch-controllers
  namespace: porch-system
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: configmanagements.configmanagement.gke.io
spec:
  group: configmanagement.gke.io
  names:
    kind: ConfigManagement
    listKind: ConfigManagementList
    plural: configmanagements
    singular: configmanagement
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ConfigManagement is the Schema for the ConfigManagement API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            properties:
              name:
                pattern: config-management
                type: string
            type: object
          spec:
            description: ConfigManagementSpec defines the desired state of ConfigManagement.
            properties:
              ConfigSyncDisableFSWatcher:
                description: ConfigSyncDisableFSWatcher provides the ability to disable
                  the fs-watcher process.  This field is intentionally left hidden/undocumented
                  since it is only meant to be used by customers who have very large
                  repositories. Optional.
                type: boolean
              ConfigSyncLogLevel:
                description: ConfigSyncLogLevel overrides the logging verbosity for
                  all ConfigSync pods. This field is intentionally left hidden/undocumented
                  since it is really only used to gather extra logs for support cases.
                type: integer
              allowVerticalScale:
                description: 'AllowVerticalScale specifies if the vertical autoscaler
                  is enabled. Default: false.'
                type: boolean
              binauthz:
                description: BinAuthz enables Binary Authorization as recognized by
                  the "binauthz.configmanagement.gke.io" label set to "true".
                properties:
                  enabled:
                    description: 'Enable or disable BinAuthz.  Default: false.'
                    type: boolean
                  policyRef:
                    description: PolicyRef is a reference to the BinAuthz policy which
                      will be evaluated. Required if BinAuthz is enabled.
                    properties:
                      gkeCluster:
                        description: BinAuthz policy associated with this GKE-on-GCP
                          cluster.
                        properties:
                          location:
                            description: Location of this cluster
                            type: string
                          name:
                            description: The name of this cluster according to GKE.
                              This is not necessarily the same as the hub membership
                              name.
                            type: string
                          project:
                            description: The name of the GCP project containing this
                              cluster
                            type: string
                        type: object
                    type: object
                type: object
              channel:
                description: 'Channel specifies a channel that can be used to resolve
                  a specific addon, eg: stable It will be ignored if Version is specified'
                type: string
              clusterName:
                description: ClusterName, if defined, sets the name for this cluster.  If
                  unset, the cluster is considered to be unnamed, and cannot use ClusterSelectors.
                type: string
              configConnector:
                description: 'Deprecated: Does nothing.  ConfigConnector can no longer
                  be enabled/disabled with the ConfigManagement resource; the software
                  is available as a standalone: https://cloud.google.com/config-connector'
                properties:
                  enabled:
                    description: 'Enable or disable the Config Connector.  Default:
                      false.'
                    type: boolean
                type: object
              enableLegacyFields:
                description: EnableLegacyFields instructs the operator to use spec.git
                  for generating a RootSync resource in MultiRepo mode. Note that
                  this should only be set to true if spec.enableMultiRepo is set to
                  true.
                type: boolean
              enableMultiRepo:
                description: EnableMultiRepo instructs the operator to enable Multi
                  Repo mode for Config Sync.
                type: boolean
              git:
                description: Git contains configuration specific to importing policies
                  from a Git repo.
                properties:
                  gcpServiceAccountEmail:
                    description: 'GCPServiceAccountEmail specifies the GCP service
                      account used to annotate the Config Sync Kubernetes Service
                      Account. Note: The field is used when secretType: gcpServiceAccount.'
                    type: string
                  policyDir:
                    description: 'PolicyDir is the absolute path of the directory
                      that contains the local policy.  Default: the root directory
                      of the repo.'
                    type: string
                  proxy:
                    description: Proxy is a struct that contains options for configuring
                      access to the Git repo via a proxy. Only has an effect when
                      secretType is one of ("cookiefile", "none").  Optional.
                    properties:
                      httpProxy:
                        description: HTTPProxy defines a HTTP_PROXY env variable used
                          to access the Git repo.  If both HTTPProxy and HTTPSProxy
                          are specified, HTTPProxy will be ignored. Optional.
                        type: string
                      httpsProxy:
                        description: HTTPSProxy defines a HTTPS_PROXY env variable
                          used to access the Git repo.  If both HTTPProxy and HTTPSProxy
                          are specified, HTTPProxy will be ignored. Optional.
                        type: string
                    type: object
                  secretType:
                    description: SecretType is the type of secret configured for access
                      to the Git repo. Must be one of ssh, cookiefile, gcenode, token,
                      gcpserviceaccount or none. Required. The validation of this
                      is case-sensitive.
                    pattern: ^(ssh|cookiefile|gcenode|gcpserviceaccount|token|none)$
                    type: string
                  syncBranch:
                    description: 'SyncBranch is the branch to sync from.  Default:
                      "master".'
                    type: string
                  syncRepo:
                    pattern: ^(((https?|git|ssh):\/\/)|git@)
                    type: string
                  syncRev:
                    description: 'SyncRev is the git revision (tag or hash) to check
                      out. Default: HEAD.'
                    type: string
                  syncWait:
                    description: 'SyncWaitSeconds is the time duration in seconds
                      between consecutive syncs.  Default: 15 seconds. Note that SyncWaitSecs
                      is not a time.Duration on purpose. This provides a reminder
                      to developers that customers specify this value using using
                      integers like "3" in their ConfigManagement YAML. However, time.Duration
                      is at a nanosecond granularity, and it''s easy to introduce
                      a bug where it looks like the code is dealing with seconds but
                      its actually nanoseconds (or vice versa).'
                    type: integer
                type: object
              hierarchyController:
                description: Hierarchy Controller enables HierarchyController components
                  as recognized by the "hierarchycontroller.configmanagement.gke.io"
                  label set to "true".
                properties:
                  enableHierarchicalResourceQuota:
                    description: 'HierarchicalResourceQuota enforces resource quota
                      in a hierarchical fashion: a resource quota set for one namespace
                      provides constraints that limit aggregate resource consumption
                      for that namespace and all its descendants. Disabling this will
                      not delete user created hrq CRs, but will delete all the intermediate
                      resources created by HRQ (specifically the resource quota singletons),
                      which are labeled with hierarchycontroller.configmanagement.gke.io/hrq
                      for easier cleanup.'
                    type: boolean
                  enablePodTreeLabels:
                    description: PodTreeLabels copies the tree labels from namespaces
                      to pods, allowing any system that uses pod logs (such as Stackdriver
                      logging) to inspect the hierarchy.
                    type: boolean
                  enabled:
                    description: 'Enable or disable the Hierarchy Controller.  Default:
                      false.'
                    type: boolean
                type: object
              importer:
                description: Importer allows one to override the existing resource
                  requirements for the importer pod
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              patches:
                items:
                  type: object
                type: array
                x-kubernetes-preserve-unknown-fields: true
              policyController:
                description: Policy Controller enables PolicyController components
                  as recognized by the "gatekeeper.sh/manifest" label set to "true".
                properties:
                  auditIntervalSeconds:
                    description: AuditIntervalSeconds. The number of seconds between
                      audit runs. Defaults to 60 seconds. To disable audit, set this
                      to 0.
                    format: int64
                    type: integer
                  enabled:
                    description: 'Enable or disable the Policy Controller.  Default:
                      false.'
                    type: boolean
                  exemptableNamespaces:
                    description: ExemptableNamespaces. The namespaces in this list
                      are able to have the admission.gatekeeper.sh/ignore label set.
                      When the label is set, Policy Controller will not be called
                      for that namespace or any resources contained in it. `gatekeeper-system`
                      is always exempted.
                    items:
                      type: string
                    type: array
                  logDeniesEnabled:
                    description: 'LogDeniesEnabled.  If true, Policy Controller will
                      log all denies and dryrun failures.  No effect unless policyController
                      is enabled.  Default: false.'
                    type: boolean
                  monitoring:
                    description: Monitoring specifies the configuration of monitoring.
                    properties:
                      backends:
                        items:
                          type: string
                        type: array
                    type: object
                  mutation:
                    description: Mutation specifies the configuration of mutation.
                      This is a preview feature and may change before becoming generally
                      available.
                    properties:
                      enabled:
                        description: 'Enable or disable mutation in policy controller.
                          If true, mutation CRDs, webhook and controller will be deployed
                          to the cluster. Default: false.'
                        type: boolean
                    type: object
                  referentialRulesEnabled:
                    description: 'ReferentialRulesEnabled.  If true, Policy Controller
                      will allow `data.inventory` references in the contents of ConstraintTemplate
                      Rego.  No effect unless policyController is enabled.  Default:
                      false.'
                    type: boolean
                  templateLibraryInstalled:
                    description: 'TemplateLibraryInstalled.  If true, a set of default
                      ConstraintTemplates will be deployed to the cluster. ConstraintTemplates
                      will not be deployed if this is explicitly set to false or if
                      policyController is not enabled. Default: true.'
                    type: boolean
                type: object
              preventDrift:
                description: 'preventDrift, if set to `true`, enables the Config Sync
                  admission webhook to prevent drifts. If set to `false`, disables
                  the Config Sync admission webhook and does not prevent drifts. Default:
                  false. Config Sync always corrects drifts no matter the value of
                  preventDrift.'
                type: boolean
              sourceFormat:
                description: "SourceFormat specifies how the repository is formatted.
                  See documentation for specifics of what these options do. \n Must
                  be one of hierarchy, unstructured. Optional. Set to hierarchy if
                  not specified. \n The validation of this is case-sensitive."
                pattern: ^(hierarchy|unstructured|)$
                type: string
              syncer:
                description: Syncer allows one to override the existing resource requirements
                  for the syncer pod
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              version:
                description: Version specifies the exact addon version to be deployed,
                  eg 1.2.3 It should not be specified if Channel is specified
                type: string
            type: object
          status:
            description: ConfigManagementStatus defines the observed state of ConfigManagement.
            properties:
              configManagementVersion:
                description: ConfigManagementVersion is the semantic version number
                  of the config management system enforced by the currently running
                  config management operator.
                type: string
              errors:
                items:
                  type: string
                type: array
              healthy:
                type: boolean
              phase:
                type: string
            required:
            - healthy
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: Namespace
metadata:
  name: config-management-system
  labels:
    configmanagement.gke.io/system: "true"
---
apiVersion: v1
kind: Namespace
metadata:
  name: config-management-monitoring
  labels:
    configmanagement.gke.io/system: "true"
---
# The Nomos system creates RBAC rules, so it requires
# full cluster-admin access. Thus, the operator needs
# to be able to grant tha permission to the installed
# Nomos components.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: config-management-operator
  name: config-management-operator
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: config-management-operator
  name: config-management-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: config-management-operator
subjects:
- kind: ServiceAccount
  name: config-management-operator
  namespace: config-management-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: config-management-operator
  name: config-management-operator
  namespace: config-management-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-management-operator
  namespace: config-management-system
  labels:
    k8s-app: config-management-operator
spec:
  strategy:
    type: Recreate
    # must be null due to 3-way merge, as
    # rollingUpdate added to the resource by default by the APIServer
    rollingUpdate: null
  selector:
    matchLabels:
      k8s-app: config-management-operator
      component: config-management-operator
  template:
    metadata:
      labels:
        k8s-app: config-management-operator
        component: config-management-operator
    spec:
      containers:
      - command:
        - /manager
        - --private-registry=
        name: manager
        image: gcr.io/config-management-release/config-management-operator:20221007213051-op
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        envFrom:
        - configMapRef:
            name: operator-environment-options
            optional: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      serviceAccount: config-management-operator
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
